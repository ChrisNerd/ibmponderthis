import java.io._
object ponder {
 val grid20x20Ascii = List(
    "BC E6 56 29 99 95 AE 27 9F 89 88 8F BC B4 2A 71 44 7F AF 96",
    "72 57 13 DD 08 44 9E A0 13 09 3F D5 AA 06 5E DB E1 EF 14 0B",
    "42 B8 F3 8E 58 F0 FA 7F 7C BD FF AF DB D9 13 3E 5D D4 30 FB",
    "60 CA B4 A1 73 E4 31 B5 B3 0C 85 DD 27 42 4F D0 11 09 28 39",
    "1B 40 7C B1 01 79 52 53 65 65 BE 0F 4A 43 CD D7 A6 FE 7F 51",
    "25 AB CC 20 F9 CC 7F 3B 4F 22 9C 72 F5 FE F9 BF A5 58 1F C7",
    "EA B2 E4 F8 72 7B 80 A2 D7 C1 4F 46 D1 5E FA AB 12 40 82 7E",
    "52 BF 4D 37 C6 5F 3D EF 56 11 D2 69 A4 02 0D 58 11 A7 9E 06",
    "F6 B2 60 AF 83 08 4E 11 71 27 60 6F 9E 0A D3 19 20 F6 A3 40",
    "B7 26 1B 3A 18 FE E3 3C FB DA 7E 78 CA 49 F3 FE 14 86 53 E9",
    "1A 19 54 BD 1A 55 20 3B 59 42 8C 07 BA C5 27 A6 31 87 2A E2",
    "36 82 E0 14 B6 09 C9 F5 57 5B 16 1A FA 1C 8A B2 DB F2 41 52",
    "87 AC 9F CC 65 0A 4C 6F 87 FD 30 7D B4 FA CB 6D 03 64 CD 19",
    "DC 22 FB B1 32 98 75 62 EF 1A 14 DC 5E 0A A2 ED 12 B5 CA C0",
    "05 BE F3 1F CB B7 8A 8F 62 BA 11 12 A0 F6 79 FC 4D 97 74 4A",
    "3C B9 0A 92 5E 8A DD A6 09 FF 68 82 F2 EE 9F 17 D2 D5 5C 72",
    "76 CD 8D 05 61 BB 41 94 F9 FD 5C 72 71 21 54 3F 3B 32 E6 8F",
    "45 3F 00 43 BB 07 1D 85 FC E2 24 CE 76 2C 96 40 10 FB 64 88",
    "FB 89 D1 E3 81 0C E1 4C 37 B2 1D 60 40 D1 A5 2D 3B E4 85 87",
    "E5 D7 05 D7 7D 9C C9 F5 70 0B 17 7B EF 18 83 46 79 0D 49 59")
                                                  //> grid20x20Ascii  : List[String] = List(BC E6 56 29 99 95 AE 27 9F 89 88 8F B
                                                  //| C B4 2A 71 44 7F AF 96, 72 57 13 DD 08 44 9E A0 13 09 3F D5 AA 06 5E DB E1 
                                                  //| EF 14 0B, 42 B8 F3 8E 58 F0 FA 7F 7C BD FF AF DB D9 13 3E 5D D4 30 FB, 60 C
                                                  //| A B4 A1 73 E4 31 B5 B3 0C 85 DD 27 42 4F D0 11 09 28 39, 1B 40 7C B1 01 79 
                                                  //| 52 53 65 65 BE 0F 4A 43 CD D7 A6 FE 7F 51, 25 AB CC 20 F9 CC 7F 3B 4F 22 9C
                                                  //|  72 F5 FE F9 BF A5 58 1F C7, EA B2 E4 F8 72 7B 80 A2 D7 C1 4F 46 D1 5E FA A
                                                  //| B 12 40 82 7E, 52 BF 4D 37 C6 5F 3D EF 56 11 D2 69 A4 02 0D 58 11 A7 9E 06,
                                                  //|  F6 B2 60 AF 83 08 4E 11 71 27 60 6F 9E 0A D3 19 20 F6 A3 40, B7 26 1B 3A 1
                                                  //| 8 FE E3 3C FB DA 7E 78 CA 49 F3 FE 14 86 53 E9, 1A 19 54 BD 1A 55 20 3B 59 
                                                  //| 42 8C 07 BA C5 27 A6 31 87 2A E2, 36 82 E0 14 B6 09 C9 F5 57 5B 16 1A FA 1C
                                                  //|  8A B2 DB F2 41 52, 87 AC 9F CC 65 0A 4C 6F 87 FD 30 7D B4 FA CB 6D 03 64 C
                                                  //| D 19, DC 22 FB B1 32 98 75 62 EF 1A 14 DC 5E 0A A2 ED 12 B5 CA C0, 05 BE F3
                                                  //|  1F CB B7 8A 8F 62 BA 11 12 A0 F6 79 FC 4D 97 74 4A, 3C B9 0A 92 5E 8A DD A
                                                  //| 6 09 FF 68 82 F2 EE 9F 17 D2 D5 5C 72, 76 CD 8D 05 61 BB 41 94 F9 FD 5C 72 
                                                  //| 71 21 54 3F 3B 32 E6 8F, 45 3F 00 43 BB 07 1D 85 FC E2 24 CE 76 2C 96 40 10
                                                  //|  FB 64 88, FB 89 D1 E3 81 0C E1 4C 37 B2 1D 60 40 D1 A5 2D 3B E4 85 87, E5 
                                                  //| D7 05 D7 7D 9C C9 F5 70 0B 17 7B EF 18 83 46 79 0D 49 59)
    
    val sol = List((0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10), (0,11), (0,12), (0,13), (0,14), (0,15), (0,16), (0,17), (0,18), (0,19), (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13), (1,14), (1,15), (1,16), (1,17), (1,18), (1,19), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (2,10), (2,11), (2,12), (2,13), (2,14), (2,15), (2,16), (2,17), (2,18), (2,19), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (3,10), (3,11), (3,12), (3,13), (3,14), (3,15), (3,16), (3,17), (3,18), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9), (4,10), (4,11), (4,12), (4,13), (4,14), (4,15), (4,16), (4,17), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9), (5,10), (5,11), (5,12), (5,13), (5,14), (5,15), (5,16), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (6,12), (6,14), (6,15), (7,0), (7,1), (7,2), (7,4), (7,7), (8,0), (8,1), (9,0))
                                                  //> sol  : List[(Int, Int)] = List((0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0
                                                  //| ,6), (0,7), (0,8), (0,9), (0,10), (0,11), (0,12), (0,13), (0,14), (0,15), (
                                                  //| 0,16), (0,17), (0,18), (0,19), (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1
                                                  //| ,6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13), (1,14), (1,15), (
                                                  //| 1,16), (1,17), (1,18), (1,19), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2
                                                  //| ,6), (2,7), (2,8), (2,9), (2,10), (2,11), (2,12), (2,13), (2,14), (2,15), (
                                                  //| 2,16), (2,17), (2,18), (2,19), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3
                                                  //| ,6), (3,7), (3,8), (3,9), (3,10), (3,11), (3,12), (3,13), (3,14), (3,15), (
                                                  //| 3,16), (3,17), (3,18), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,
                                                  //| 7), (4,8), (4,9), (4,10), (4,11), (4,12), (4,13), (4,14), (4,15), (4,16), (
                                                  //| 4,17), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9)
                                                  //| , (5,10), (5,11), (5,12), (5,13), (5,14), (5,15), (5,16), (6,0), (6,1), (6,
                                                  //| 2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (6,12), (6,14), (6,15)
                                                  //| , (7,0), (7,1), (7,2), (7,4), (7,7), (8,0), (8,1), (9,0))

  val gridExampleAscii = List(
    "13 92 49 EC",
    "BD 31 E8 FF",
    "09 DD BE DE",
    "C9 5A 1D 36")                                //> gridExampleAscii  : List[String] = List(13 92 49 EC, BD 31 E8 FF, 09 DD BE 
                                                  //| DE, C9 5A 1D 36)

  def arrayGridToNumberGrid(g: List[String]): List[Array[Int]] =
    g.map(_.split(" ").map(x => Integer.parseInt(x, 16) - 128))
                                                  //> arrayGridToNumberGrid: (g: List[String])List[Array[Int]]

  val grid2020 = arrayGridToNumberGrid(grid20x20Ascii)
                                                  //> grid2020  : List[Array[Int]] = List(Array(60, 102, -42, -87, 25, 21, 46, -8
                                                  //| 9, 31, 9, 8, 15, 60, 52, -86, -15, -60, -1, 47, 22), Array(-14, -41, -109, 
                                                  //| 93, -120, -60, 30, 32, -109, -119, -65, 85, 42, -122, -34, 91, 97, 111, -10
                                                  //| 8, -117), Array(-62, 56, 115, 14, -40, 112, 122, -1, -4, 61, 127, 47, 91, 8
                                                  //| 9, -109, -66, -35, 84, -80, 123), Array(-32, 74, 52, 33, -13, 100, -79, 53,
                                                  //|  51, -116, 5, 93, -89, -62, -49, 80, -111, -119, -88, -71), Array(-101, -64
                                                  //| , -4, 49, -127, -7, -46, -45, -27, -27, 62, -113, -54, -61, 77, 87, 38, 126
                                                  //| , -1, -47), Array(-91, 43, 76, -96, 121, 76, -1, -69, -49, -94, 28, -14, 11
                                                  //| 7, 126, 121, 63, 37, -40, -97, 71), Array(106, 50, 100, 120, -14, -5, 0, 34
                                                  //| , 87, 65, -49, -58, 81, -34, 122, 43, -110, -64, 2, -2), Array(-46, 63, -51
                                                  //| , -73, 70, -33, -67, 111, -42, -111, 82, -23, 36, -126, -115, -40, -111, 39
                                                  //| , 30, -122), Array(118, 50, -32, 47, 3, -120, -50, -111, -15, -89, -32, -17
                                                  //| , 30, -118, 83, -103, -96, 118, 35, -64), Array(55, -90, -101, -70, -104, 1
                                                  //| 26, 99, -68, 123, 90, -2, -8, 74, -55, 115, 126, -108, 6, -45, 105), Array(
                                                  //| -102, -103, -44, 61, -102, -43, -96, -69, -39, -62, 12, -121, 58, 69, -89, 
                                                  //| 38, -79, 7, -86, 98), Array(-74, 2, 96, -108, 54, -119, 73, 117, -41, -37, 
                                                  //| -106, -102, 122, -100, 10, 50, 91, 114, -63, -46), Array(7, 44, 31, 76, -27
                                                  //| , -118, -52, -17, 7, 125, -80, -3, 52, 122, 75, -19, -125, -28, 77, -103), 
                                                  //| Array(92, -94, 123, 49, -78, 24, -11, -30, 111, -102, -108, 92, -34, -118, 
                                                  //| 34, 109, -110, 53, 74, 64), Array(-123, 62, 115, -97, 75, 55, 10, 15, -30, 
                                                  //| 58, -111, -110, 32, 118, -7, 124, -51, 23, -12, -54), Array(-68, 57, -118, 
                                                  //| 18, -34, 10, 93, 38, -119, 127, -24, 2, 114, 110, 31, -105, 82, 85, -36, -1
                                                  //| 4), Array(-10, 77, 13, -123, -31, 59, -63, 20, 121, 125, -36, -14, -15, -95
                                                  //| , -44, -65, -69, -78, 102, 15), Array(-59, -65, -128, -61, 59, -121, -99, 5
                                                  //| , 124, 98, -92, 78, -10, -84, 22, -64, -112, 123, -28, 8), Array(123, 9, 81
                                                  //| , 99, 1, -116, 97, -52, -73, 50, -99, -32, -64, 81, 37, -83, -69, 100, 5, 7
                                                  //| ), Array(101, 87, -123, 87, -3, 28, 73, 117, -16, -117, -105, -5, 111, -104
                                                  //| , 3, -58, -7, -115, -55, -39))
  val gridExample = arrayGridToNumberGrid(gridExampleAscii)
                                                  //> gridExample  : List[Array[Int]] = List(Array(-109, 18, -55, 108), Array(61,
                                                  //|  -79, 104, 127), Array(-119, 93, 62, 94), Array(73, -38, -99, -74))

   	def printSVG() =
   	{
   	 //     val pw = new PrintWriter(new File("%07d".format(svgFileNumber) + ".svg"))
     val pw = new PrintWriter(new File("ponderMar2021.svg"))
     pw.write("<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"-1 -1 21 21\" height=\"" + 800 + "\" width=\"" + 800 + "\">\n")
     pw.write("<style>\n")
     pw.write("  .small { font: italic 0.1px sans-serif; }\n")
     pw.write("</style>\n")
     def node(i: Int, j: Int) = {
      val colour: String = if (sol.contains((i,j)))
       if (grid2020(i)(j) >= 0)
        "red"
       else
       "yellow"
      else
        if (grid2020(i)(j) >= 0)
        "blue"
       else
       "grey"
      val circleLine: String = "<circle cx=\"" + j + "\" cy=\"" + i + "\" r=\"0.4\" stroke=\"black\" stroke-width=\"0.03\" fill=\"" + colour + "\" fill-opacity=\"" + { grid2020(i)(j).abs / 128.0} + "\" />\n"
      val textLines: String = "<text x=\"" + { j - 0.1 } + "\" y=\"" + { i - 0.1 } + "\" class=\"small\">" + grid20x20Ascii(i).split(" ")(j) + "</text>\"\n"
      val textLines2: String = "<text x=\"" + { j - 0.1 } + "\" y=\"" + { i + 0.0 } + "\" class=\"small\">" + grid2020(i)(j) + "</text>\"\n"
      pw.write(circleLine)
      pw.write(textLines)
      pw.write(textLines2)
     }
    for {
      i <- 0 until 20
      j <- 0 until 20
    } yield node(i, j)
     pw.write("</svg>")
     pw.close
   	}                                         //> printSVG: ()Unit
   	
   printSVG()
   
   
   sol.map( x=> grid2020(x._1)(x._2)).sum         //> res0: Int = 1424
        
    // K, we can go by rows.
    // There are 2^20 combinations of making a row.
    // About 10 of them are positive, so we only need to consider switching off the negative ones
    // leaving about 2^10 per row.
    
    // Given a row above and a column range, what's the maximum score we can make (summing only the elements on this row and below, using only the columns in columnRange).
    // If we're on the last row, it's a base case. Filter for canBeVisited, and select the positive ones.
    // Otherwise, filter for canBeVisited. Iterate over all the ways of partitioning this column range in 2.
 def descendDownTheRows(grid: List[Array[Int]], rowAbove: List[Boolean], rowNumber: Int, jMin: Int, jMax: Int): (List[Boolean], Int)  = {
  if (rowNumber == 20)
   (rowAbove, 0)
  else
  {
   val currentRowInts = grid(rowNumber).drop(jMin).take(rowAbove.size)
   val listOfNegatives = currentRowInts.zipWithIndex.filter( _._1 < 0)
   listOfNegatives.toList match {
    case head :: tail => {
     // hhmmm, if we exploreHead, maybe just sum until the next entry.
    
     val exploreHead = descendDownTheRows(grid, List.fill(head._2)(true), rowNumber+1, if(jMin==0) jMin else jMin + 1, jMax)
     val excludeHead = descendDownTheRows(grid, rowAbove, rowNumber, jMin, jMax)


// There's a bug in this line. Must include the currentRow sum.
     if (exploreHead._2 > excludeHead._2) exploreHead else excludeHead
     
    }
    case Nil => {
     val r =descendDownTheRows(grid, rowAbove, rowNumber+1, jMin, jMax)
     (r._1, r._2 + currentRowInts.sum)
    }
   }
  
   
  ???
  }
 }                                                //> descendDownTheRows: (grid: List[Array[Int]], rowAbove: List[Boolean], rowNu
                                                  //| mber: Int, jMin: Int, jMax: Int)(List[Boolean], Int)

// No. Iterate over...
    // Create a list of positions of the negatives.
    // We need to do the power set of them. or do we? There's a lot of reuse we can do.
    // listOfNegatives match {
    // case head :: tail => // include and exclude the head (recurse, but each recurse should really limit the column range). select the max.
    // case Nil =>
    
    // Select the max. Hmmm, not sure that's any better.
  
  def canBeVisit(exploredSoFar: Set[(Int,Int)], maxColumn: Int ) : ((Int,Int)) => Boolean =  { case (a, b) => a == 0 ||
        // (a-1,b-1), (a-1,b), (a-1,b+1)
        (b < 1 || exploredSoFar((a - 1), (b - 1))) && exploredSoFar((a - 1), (b)) && (b >= maxColumn - 1 || exploredSoFar((a - 1), (b + 1))) }
                                                  //> canBeVisit: (exploredSoFar: Set[(Int, Int)], maxColumn: Int)((Int, Int)) =>
                                                  //|  Boolean


 val allCoods = (for {
      i <- (0 until 5).toSet[Int]
      j <- 0 until 5
    } yield (i, j)).toSet                         //> allCoods  : scala.collection.immutable.Set[(Int, Int)] = Set((0,2), (0,0), 
                                                  //| (4,0), (3,4), (3,1), (4,1), (2,0), (0,3), (4,4), (3,0), (1,1), (1,4), (0,4)
                                                  //| , (3,2), (1,3), (2,2), (4,2), (2,4), (0,1), (3,3), (2,3), (1,2), (2,1), (4,
                                                  //| 3), (1,0))


     
// val allValidCombos = allCoods.subsets().filter( s => s.forall(canBeVisit(s, 5)))

// val allValidCombosList =  allValidCombos.toList
 //allValidCombosList.size
 /*
 val allValidCombosString = allValidCombosList.map( c => (0 until 25).map{ index =>
  val i = index / 5
  val j = index % 5
  if ( c.contains((i,j)) )
   '1'
  else
   '0'
 }.mkString )
*/
val allValidCombosString  : List[String] = List("0000000000000000000000000", "0010000000000000000000000", "1000000000000000000000000", "0001000000000000000000000", "0000100000000000000000000", "0100000000000000000000000", "1010000000000000000000000", "0011000000000000000000000", "0010100000000000000000000", "0110000000000000000000000", "1001000000000000000000000", "1000100000000000000000000", "1100000000000000000000000", "0001100000000000000000000", "0101000000000000000000000", "0100100000000000000000000", "1011000000000000000000000", "1010100000000000000000000", "1110000000000000000000000", "0011100000000000000000000", "0111000000000000000000000", "0110100000000000000000000", "1001100000000000000000000", "1101000000000000000000000", "1100100000000000000000000", "1100010000000000000000000", "0001100001000000000000000", "0101100000000000000000000", "1011100000000000000000000", "1111000000000000000000000", "1110001000000000000000000", "1110100000000000000000000", "1110010000000000000000000", "0011100001000000000000000", "0011100010000000000000000", "0111100000000000000000000", "0111000100000000000000000", "1001100001000000000000000", "1101100000000000000000000", "1101010000000000000000000", "1100110000000000000000000", "0101100001000000000000000", "1111001000000000000000000", "1011100001000000000000000", "1011100010000000000000000", "1111100000000000000000000", "1111000100000000000000000", "1111010000000000000000000", "1110101000000000000000000", "1110011000000000000000000", "1110110000000000000000000", "0011100011000000000000000", "0111100001000000000000000", "0111100010000000000000000", "0111100100000000000000000", "1101100001000000000000000", "1101110000000000000000000", "1110011000100000000000000", "1111101000000000000000000", "1111001100000000000000000", "1111011000000000000000000", "1011100011000000000000000", "1111100001000000000000000", "1111100010000000000000000", "1111100100000000000000000", "1111110000000000000000000", "1111010100000000000000000", "1110111000000000000000000", "0011100011000010000000000", "0111100011000000000000000", "0111100101000000000000000", "0111100110000000000000000", "1101110001000000000000000", "1111011000100000000000000", "1110111000100000000000000", "1111101001000000000000000", "1111101010000000000000000", "1111101100000000000000000", "1111111000000000000000000", "1111011100000000000000000", "1011100011000010000000000", "1111100011000000000000000", "1111100101000000000000000", "1111110001000000000000000", "1111100110000000000000000", "1111110010000000000000000", "1111110100000000000000000", "0111100011000010000000000", "0111100111000000000000000", "1111111000100000000000000", "1111011100100000000000000", "1111101011000000000000000", "1111101101000000000000000", "1111111001000000000000000", "1111101110000000000000000", "1111111010000000000000000", "1111111100000000000000000", "1111011100010000000000000", "1111100011000010000000000", "1111100111000000000000000", "1111110011000000000000000", "1111110101000000000000000", "1111110110000000000000000", "0111100111000010000000000", "0111100111000100000000000", "1111111001100000000000000", "1111111010100000000000000", "1111111100100000000000000", "1111011100110000000000000", "1111101011000010000000000", "1111101111000000000000000", "1111111011000000000000000", "1111111101000000000000000", "1111101110001000000000000", "1111111110000000000000000", "1111111100010000000000000", "1111100111000010000000000", "1111110011000010000000000", "1111100111000100000000000", "1111110111000000000000000", "0111100111000110000000000", "1111011100110001000000000", "1111111011100000000000000", "1111111101100000000000000", "1111111110100000000000000", "1111111100110000000000000", "1111101111001000000000000", "1111101111000010000000000", "1111111011000010000000000", "1111101111000100000000000", "1111111111000000000000000", "1111111101010000000000000", "1111111110001000000000000", "1111111110010000000000000", "1111100111000110000000000", "1111110111000010000000000", "1111110111000100000000000", "0111100111000110000100000", "1111100111000110000100000", "1111111100110001000000000", "1111111011100010000000000", "1111111111100000000000000", "1111111101110000000000000", "1111111110101000000000000", "1111111110110000000000000", "1111101111001010000000000", "1111101111001100000000000", "1111111111001000000000000", "1111101111000110000000000", "1111111111000010000000000", "1111111111000100000000000", "1111111111010000000000000", "1111111110011000000000000", "1111110111000110000000000", "1111101111000110000100000", "1111110111000110000100000", "1111111101110001000000000", "1111111110110001000000000", "1111111111101000000000000", "1111111111100010000000000", "1111111111100100000000000", "1111111111110000000000000", "1111111110111000000000000", "1111101111001110000000000", "1111111111001010000000000", "1111111111001100000000000", "1111111111011000000000000", "1111111111000110000000000", "1111111111010010000000000", "1111111111010100000000000", "1111101111001110000100000", "1111111111000110000100000", "1111111110111000100000000", "1111111111110001000000000", "1111111110111001000000000", "1111111111101010000000000", "1111111111101100000000000", "1111111111111000000000000", "1111111111100110000000000", "1111111111110010000000000", "1111111111110100000000000", "1111101111001110001000000", "1111111111001110000000000", "1111111111011010000000000", "1111111111011100000000000", "1111111111010110000000000", "1111111111100110000100000", "1111101111001110001100000", "1111111111001110000100000", "1111111111010110000100000", "1111111110111001100000000", "1111111111111000100000000", "1111111111111001000000000", "1111111111110011000000000", "1111111111110101000000000", "1111111111101110000000000", "1111111111111010000000000", "1111111111111100000000000", "1111111111110110000000000", "1111111111011100010000000", "1111111111001110001000000", "1111111111011110000000000", "1111111110111001100010000", "1111111111101110000100000", "1111111111110110000100000", "1111101111001110001100001", "1111111111001110001100000", "1111111111011110000100000", "1111111111111001100000000", "1111111111111010100000000", "1111111111111100100000000", "1111111111111011000000000", "1111111111111101000000000", "1111111111110111000000000", "1111111111111100010000000", "1111111111101110001000000", "1111111111111110000000000", "1111111111011110010000000", "1111111111011110001000000", "1111111111111001100010000", "1111111111110111000100000", "1111111111101110001100000", "1111111111111110000100000", "1111111111001110001100001", "1111111111011110010100000", "1111111111011110001100000", "1111111111111011100000000", "1111111111111101100000000", "1111111111111100110000000", "1111111111111110100000000", "1111111111111101010000000", "1111111111111111000000000", "1111111111111110010000000", "1111111111111110001000000", "1111111111011110011000000", "1111111111111011100010000", "1111111111111101100010000", "1111111111111110100100000", "1111111111101110001100001", "1111111111111111000100000", "1111111111111110010100000", "1111111111111110001100000", "1111111111011110001100001", "1111111111011110011100000", "1111111111111101110000000", "1111111111111111100000000", "1111111111111110110000000", "1111111111111110101000000", "1111111111111111010000000", "1111111111111111001000000", "1111111111111110011000000", "1111111111111101110010000", "1111111111111111100010000", "1111111111111111100100000", "1111111111111110110100000", "1111111111111110101100000", "1111111111111110001100001", "1111111111111111010100000", "1111111111111111001100000", "1111111111111110011100000", "1111111111011110011100001", "1111111111011110011100010", "1111111111111101110001000", "1111111111111111110000000", "1111111111111111101000000", "1111111111111110111000000", "1111111111111111011000000", "1111111111111111100110000", "1111111111111101110011000", "1111111111111111110010000", "1111111111111111101010000", "1111111111111110101100001", "1111111111111111110100000", "1111111111111111101100000", "1111111111111110111100000", "1111111111111111001100001", "1111111111111110011100001", "1111111111111111011100000", "1111111111111110011100010", "1111111111011110011100011", "1111111111111111110001000", "1111111111111111111000000", "1111111111111110111000100", "1111111111111111110110000", "1111111111111111101110000", "1111111111111111110011000", "1111111111111111111010000", "1111111111111111110101000", "1111111111111111101100001", "1111111111111110111100001", "1111111111111111111100000", "1111111111111110111100100", "1111111111111110111100010", "1111111111111111011100001", "1111111111111110011100011", "1111111111111111011100010", "1111111111111111111001000", "1111111111111111111000100", "1111111111111111110111000", "1111111111111111101110001", "1111111111111111111110000", "1111111111111111111011000", "1111111111111111111010100", "1111111111111111111101000", "1111111111111111111100001", "1111111111111110111100101", "1111111111111110111100011", "1111111111111111111100100", "1111111111111111111100010", "1111111111111110111100110", "1111111111111111011100011", "1111111111111111111001100", "1111111111111111111111000", "1111111111111111111110001", "1111111111111111111110100", "1111111111111111111110010", "1111111111111111111011100", "1111111111111111111101001", "1111111111111111111101100", "1111111111111111111101010", "1111111111111111111100101", "1111111111111111111100011", "1111111111111110111100111", "1111111111111111111100110", "1111111111111111111111001", "1111111111111111111111100", "1111111111111111111111010", "1111111111111111111110101", "1111111111111111111110011", "1111111111111111111110110", "1111111111111111111101101", "1111111111111111111101011", "1111111111111111111101110", "1111111111111111111100111", "1111111111111111111111101", "1111111111111111111111011", "1111111111111111111111110", "1111111111111111111110111", "1111111111111111111101111", "1111111111111111111111111")
                                                  //> allValidCombosString  : List[String] = List(0000000000000000000000000, 001
                                                  //| 0000000000000000000000, 1000000000000000000000000, 00010000000000000000000
                                                  //| 00, 0000100000000000000000000, 0100000000000000000000000, 1010000000000000
                                                  //| 000000000, 0011000000000000000000000, 0010100000000000000000000, 011000000
                                                  //| 0000000000000000, 1001000000000000000000000, 1000100000000000000000000, 11
                                                  //| 00000000000000000000000, 0001100000000000000000000, 0101000000000000000000
                                                  //| 000, 0100100000000000000000000, 1011000000000000000000000, 101010000000000
                                                  //| 0000000000, 1110000000000000000000000, 0011100000000000000000000, 01110000
                                                  //| 00000000000000000, 0110100000000000000000000, 1001100000000000000000000, 1
                                                  //| 101000000000000000000000, 1100100000000000000000000, 110001000000000000000
                                                  //| 0000, 0001100001000000000000000, 0101100000000000000000000, 10111000000000
                                                  //| 00000000000, 1111000000000000000000000, 1110001000000000000000000, 1110100
                                                  //| 000000000000000000, 1110010000000000000000000, 0011100001000000000000000, 
                                                  //| 0011100010000000000000000, 0111100000000000000000000, 01110001000000000000
                                                  //| 00000, 1001100001000000000000000, 1101100000000000000000000, 1101010000000
                                                  //| 000000000000, 1100110000000000000000000, 0101100001000000000000000, 111100
                                                  //| 1000000000000000000, 1011100001000000000000000, 1011100010000000000000000,
                                                  //|  1111100000000000000000000, 1111000100000000000000000, 1111010000000000000
                                                  //| 000000, 1110101000000000000000000, 1110011000000000000000000, 111011000000
                                                  //| 0000000000000, 0011100011000000000000000, 0111100001000000000000000, 01111
                                                  //| 00010000000000000000, 0111100100000000000000000, 1101100001000000000000000
                                                  //| , 1101110000000000000000000, 1110011000100000000000000, 111110100000000000
                                                  //| 0000000, 1111001100000000000000000, 1111011000000000000000000, 10111000110
                                                  //| 00000000000000, 1111100001000000000000000, 1111100010000000000000000, 1111
                                                  //| 100100000000000000000, 1111110000000000000000000, 111101010000000000000000
                                                  //| 0, 1110111000000000000000000, 0011100011000010000000000, 01111000110000000
                                                  //| 00000000, 0111100101000000000000000, 0111100110000000000000000, 1101110001
                                                  //| 000000000000000, 1111011000100000000000000, 1110111000100000000000000, 111
                                                  //| 1101001000000000000000, 1111101010000000000000000, 11111011000000000000000
                                                  //| 00, 1111111000000000000000000, 1111011100000000000000000, 1011100011000010
                                                  //| 000000000, 1111100011000000000000000, 1111100101000000000000000, 111111000
                                                  //| 1000000000000000, 1111100110000000000000000, 1111110010000000000000000, 11
                                                  //| 11110100000000000000000, 0111100011000010000000000, 0111100111000000000000
                                                  //| 000, 1111111000100000000000000, 1111011100100000000000000, 111110101100000
                                                  //| 0000000000, 1111101101000000000000000, 1111111001000000000000000, 11111011
                                                  //| 10000000000000000, 1111111010000000000000000, 1111111100000000000000000, 1
                                                  //| 111011100010000000000000, 1111100011000010000000000, 111110011100000000000
                                                  //| 0000, 1111110011000000000000000, 1111110101000000000000000, 11111101100000
                                                  //| 00000000000, 0111100111000010000000000, 0111100111000100000000000, 1111111
                                                  //| 001100000000000000, 1111111010100000000000000, 1111111100100000000000000, 
                                                  //| 1111011100110000000000000, 1111101011000010000000000, 11111011110000000000
                                                  //| 00000, 1111111011000000000000000, 1111111101000000000000000, 1111101110001
                                                  //| 000000000000, 1111111110000000000000000, 1111111100010000000000000, 111110
                                                  //| 0111000010000000000, 1111110011000010000000000, 1111100111000100000000000,
                                                  //|  1111110111000000000000000, 0111100111000110000000000, 1111011100110001000
                                                  //| 000000, 1111111011100000000000000, 1111111101100000000000000, 111111111010
                                                  //| 0000000000000, 1111111100110000000000000, 1111101111001000000000000, 11111
                                                  //| 01111000010000000000, 1111111011000010000000000, 1111101111000100000000000
                                                  //| , 1111111111000000000000000, 1111111101010000000000000, 111111111000100000
                                                  //| 0000000, 1111111110010000000000000, 1111100111000110000000000, 11111101110
                                                  //| 00010000000000, 1111110111000100000000000, 0111100111000110000100000, 1111
                                                  //| 100111000110000100000, 1111111100110001000000000, 111111101110001000000000
                                                  //| 0, 1111111111100000000000000, 1111111101110000000000000, 11111111101010000
                                                  //| 00000000, 1111111110110000000000000, 1111101111001010000000000, 1111101111
                                                  //| 001100000000000, 1111111111001000000000000, 1111101111000110000000000, 111
                                                  //| 1111111000010000000000, 1111111111000100000000000, 11111111110100000000000
                                                  //| 00, 1111111110011000000000000, 1111110111000110000000000, 1111101111000110
                                                  //| 000100000, 1111110111000110000100000, 1111111101110001000000000, 111111111
                                                  //| 0110001000000000, 1111111111101000000000000, 1111111111100010000000000, 11
                                                  //| 11111111100100000000000, 1111111111110000000000000, 1111111110111000000000
                                                  //| 000, 1111101111001110000000000, 1111111111001010000000000, 111111111100110
                                                  //| 0000000000, 1111111111011000000000000, 1111111111000110000000000, 11111111
                                                  //| 11010010000000000, 1111111111010100000000000, 1111101111001110000100000, 1
                                                  //| 111111111000110000100000, 1111111110111000100000000, 111111111111000100000
                                                  //| 0000, 1111111110111001000000000, 1111111111101010000000000, 11111111111011
                                                  //| 00000000000, 1111111111111000000000000, 1111111111100110000000000, 1111111
                                                  //| 111110010000000000, 1111111111110100000000000, 1111101111001110001000000, 
                                                  //| 1111111111001110000000000, 1111111111011010000000000, 11111111110111000000
                                                  //| 00000, 1111111111010110000000000, 1111111111100110000100000, 1111101111001
                                                  //| 110001100000, 1111111111001110000100000, 1111111111010110000100000, 111111
                                                  //| 1110111001100000000, 1111111111111000100000000, 1111111111111001000000000,
                                                  //|  1111111111110011000000000, 1111111111110101000000000, 1111111111101110000
                                                  //| 000000, 1111111111111010000000000, 1111111111111100000000000, 111111111111
                                                  //| 0110000000000, 1111111111011100010000000, 1111111111001110001000000, 11111
                                                  //| 11111011110000000000, 1111111110111001100010000, 1111111111101110000100000
                                                  //| , 1111111111110110000100000, 1111101111001110001100001, 111111111100111000
                                                  //| 1100000, 1111111111011110000100000, 1111111111111001100000000, 11111111111
                                                  //| 11010100000000, 1111111111111100100000000, 1111111111111011000000000, 1111
                                                  //| 111111111101000000000, 1111111111110111000000000, 111111111111110001000000
                                                  //| 0, 1111111111101110001000000, 1111111111111110000000000, 11111111110111100
                                                  //| 10000000, 1111111111011110001000000, 1111111111111001100010000, 1111111111
                                                  //| 110111000100000, 1111111111101110001100000, 1111111111111110000100000, 111
                                                  //| 1111111001110001100001, 1111111111011110010100000, 11111111110111100011000
                                                  //| 00, 1111111111111011100000000, 1111111111111101100000000, 1111111111111100
                                                  //| 110000000, 1111111111111110100000000, 1111111111111101010000000, 111111111
                                                  //| 1111111000000000, 1111111111111110010000000, 1111111111111110001000000, 11
                                                  //| 11111111011110011000000, 1111111111111011100010000, 1111111111111101100010
                                                  //| 000, 1111111111111110100100000, 1111111111101110001100001, 111111111111111
                                                  //| 1000100000, 1111111111111110010100000, 1111111111111110001100000, 11111111
                                                  //| 11011110001100001, 1111111111011110011100000, 1111111111111101110000000, 1
                                                  //| 111111111111111100000000, 1111111111111110110000000, 111111111111111010100
                                                  //| 0000, 1111111111111111010000000, 1111111111111111001000000, 11111111111111
                                                  //| 10011000000, 1111111111111101110010000, 1111111111111111100010000, 1111111
                                                  //| 111111111100100000, 1111111111111110110100000, 1111111111111110101100000, 
                                                  //| 1111111111111110001100001, 1111111111111111010100000, 11111111111111110011
                                                  //| 00000, 1111111111111110011100000, 1111111111011110011100001, 1111111111011
                                                  //| 110011100010, 1111111111111101110001000, 1111111111111111110000000, 111111
                                                  //| 1111111111101000000, 1111111111111110111000000, 1111111111111111011000000,
                                                  //|  1111111111111111100110000, 1111111111111101110011000, 1111111111111111110
                                                  //| 010000, 1111111111111111101010000, 1111111111111110101100001, 111111111111
                                                  //| 1111110100000, 1111111111111111101100000, 1111111111111110111100000, 11111
                                                  //| 11111111111001100001, 1111111111111110011100001, 1111111111111111011100000
                                                  //| , 1111111111111110011100010, 1111111111011110011100011, 111111111111111111
                                                  //| 0001000, 1111111111111111111000000, 1111111111111110111000100, 11111111111
                                                  //| 11111110110000, 1111111111111111101110000, 1111111111111111110011000, 1111
                                                  //| 111111111111111010000, 1111111111111111110101000, 111111111111111110110000
                                                  //| 1, 1111111111111110111100001, 1111111111111111111100000, 11111111111111101
                                                  //| 11100100, 1111111111111110111100010, 1111111111111111011100001, 1111111111
                                                  //| 111110011100011, 1111111111111111011100010, 1111111111111111111001000, 111
                                                  //| 1111111111111111000100, 1111111111111111110111000, 11111111111111111011100
                                                  //| 01, 1111111111111111111110000, 1111111111111111111011000, 1111111111111111
                                                  //| 111010100, 1111111111111111111101000, 1111111111111111111100001, 111111111
                                                  //| 1111110111100101, 1111111111111110111100011, 1111111111111111111100100, 11
                                                  //| 11111111111111111100010, 1111111111111110111100110, 1111111111111111011100
                                                  //| 011, 1111111111111111111001100, 1111111111111111111111000, 111111111111111
                                                  //| 1111110001, 1111111111111111111110100, 1111111111111111111110010, 11111111
                                                  //| 11111111111011100, 1111111111111111111101001, 1111111111111111111101100, 1
                                                  //| 111111111111111111101010, 1111111111111111111100101, 111111111111111111110
                                                  //| 0011, 1111111111111110111100111, 1111111111111111111100110, 11111111111111
                                                  //| 11111111001, 1111111111111111111111100, 1111111111111111111111010, 1111111
                                                  //| 111111111111110101, 1111111111111111111110011, 1111111111111111111110110, 
                                                  //| 1111111111111111111101101, 1111111111111111111101011, 11111111111111111111
                                                  //| 01110, 1111111111111111111100111, 1111111111111111111111101, 1111111111111
                                                  //| 111111111011, 11111111111111111
                                                  //| Output exceeds cutoff limit.
 
 def print5x5(s: String) = s.toCharArray.grouped(5).foreach(a => println(a.mkString))
                                                  //> print5x5: (s: String)Unit
 // allValidCombosString.foreach(print5x5)
 
 
 
 def numberOfDistinctSums(grid: List[Int]): Int = allValidCombosString.map{ _.zip(grid).map{ case(char, n) =>
  { if (char == '0') 0 else n }  - 128 }.sum }.distinct.size
                                                  //> numberOfDistinctSums: (grid: List[Int])Int

 class GeneticExploration[Gene, Specimen <% Iterable[Gene]]
    (val mutationRate: Double,
     val population: Int,
     genePool: Array[Gene],
     specimenBuilder: Iterable[Gene] => Specimen,
     fitnessF: Specimen => Int,
     stopCondition: List[Specimen] => Boolean)
{
 
// def fitness(src: IndexedSeq[Int]): Int = numberOfDistinctSums(src)
 def randomGenes: Stream[Gene] = genePool(scala.util.Random.nextInt(genePool.length)) #:: randomGenes
 def newSpecimen(len: Int): Specimen = specimenBuilder(randomGenes.take(len))
 
 type Pool = List[Specimen]

 def randomPool(archetype: Specimen): Pool =
  (1 to population).map(_ => newSpecimen(archetype.size)).toList
 
 
 def renormalize(vector: Array[Int]): Array[Double] = {
    val sum = vector.sum.toDouble
    vector.map(_ / sum)
  }
 
 type MatePool = List[(Specimen, Double)]

 def matePool(pool: Pool): MatePool = {
    val fitnesses = pool.map(fitnessF).toArray
    pool.zip(renormalize(fitnesses))
 }
 
 def monteCarlo[A](weightedList: List[(A, Double)]): A =
  weightedList(scala.util.Random.nextInt(weightedList.length)) match {
     case (s, f) if f > scala.util.Random.nextFloat => s
     case _ => monteCarlo(weightedList)
  }
 
 def mutate(s: Specimen): Specimen =
  specimenBuilder(s.map(gene =>
    if (mutationRate > scala.util.Random.nextFloat) randomGenes.head else gene))
 
 def crossover(a: Specimen, b: Specimen): Specimen =
  mutate(specimenBuilder(a.zip(b).map(gene =>
    if (scala.util.Random.nextFloat >= 0.5) gene._1 else gene._2)))
 
 def popReproduction(matePool: MatePool): Pool =
  (1 to population).par.map(_ =>
    crossover(monteCarlo(matePool), monteCarlo(matePool))).toList
 
 def evolution(pool: Pool, epoch: Int = 0): (Pool, Int) = {
  val newGeneration = popReproduction(matePool(pool))
    if (stopCondition(newGeneration)) (newGeneration, epoch)
    else evolution(newGeneration, epoch + 1)
 }
 
 }
 
 val genePool = (0 to 255).toArray                //> genePool  : Array[Int] = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1
                                                  //| 3, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                                  //|  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 5
                                                  //| 0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                                                  //|  69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 8
                                                  //| 7, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104
                                                  //| , 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 11
                                                  //| 9, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 1
                                                  //| 34, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 
                                                  //| 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
                                                  //|  164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178
                                                  //| , 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 19
                                                  //| 3, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 2
                                                  //| 08, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 
                                                  //| 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
                                                  //|  238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252
                                                  //| , 253, 254, 255)
 
 val petri = new GeneticExploration[Int, List[Int]](
    0.01, 500, genePool,           // rate of mutation, max population and gene pool
    cs => cs.toList,           // how to build a specimen from genes
    numberOfDistinctSums,       // the fitness function
    _.exists(x => numberOfDistinctSums(x) == 340)          // the stop condition
)                                                 //> petri  : ponder.GeneticExploration[Int,List[Int]] = ponder$GeneticExplorat
                                                  //| ion$1@604ed9f0
 
  
 val archetype = List.fill(25)(42)                //> archetype  : List[Int] = List(42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 
                                                  //| 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42)
 val evolvedSpecimens = petri.evolution(petri.randomPool(archetype))
                                                  //> evolvedSpecimens  : (ponder.petri.Pool, Int) = (List(List(180, 171, 38, 13
                                                  //| 5, 207, 189, 19, 102, 106, 151, 252, 45, 55, 243, 239, 66, 228, 20, 35, 12
                                                  //| 2, 127, 221, 148, 106, 177), List(247, 184, 168, 15, 242, 161, 19, 234, 11
                                                  //| 1, 76, 11, 173, 162, 193, 162, 205, 7, 147, 193, 188, 214, 134, 50, 25, 17
                                                  //| 9), List(26, 104, 77, 23, 2, 161, 37, 200, 236, 200, 102, 173, 122, 162, 2
                                                  //| 37, 176, 43, 31, 245, 117, 214, 11, 207, 126, 23), List(247, 163, 182, 241
                                                  //| , 207, 43, 132, 149, 170, 183, 97, 47, 108, 161, 214, 177, 44, 164, 254, 1
                                                  //| 53, 35, 76, 171, 83, 193), List(216, 32, 11, 203, 243, 108, 68, 62, 236, 8
                                                  //| 2, 144, 155, 155, 167, 153, 177, 14, 185, 19, 72, 27, 188, 4, 124, 193), L
                                                  //| ist(109, 42, 43, 225, 205, 128, 214, 251, 9, 115, 33, 152, 20, 27, 212, 23
                                                  //| 6, 48, 89, 237, 67, 200, 93, 228, 228, 237), List(92, 59, 77, 103, 164, 11
                                                  //| 6, 94, 126, 147, 21, 137, 179, 170, 248, 178, 66, 107, 164, 18, 52, 167, 1
                                                  //| 76, 93, 106, 146), List(215, 146, 77, 241, 109, 222, 23, 74, 236, 94, 252,
                                                  //|  47, 165, 178, 237, 250, 237, 40, 29, 177, 127, 21, 207, 106, 193), List(2
                                                  //| 6, 104, 165, 167, 242, 108, 19, 62, 254, 196, 97, 137, 124, 33, 153, 177, 
                                                  //| 84, 87, 38, 72, 189, 76, 206, 251, 177), List(47, 71, 175, 103, 150, 92, 1
                                                  //| 9, 79, 63, 146, 236, 64, 108, 225, 160, 177, 214, 242, 35, 209, 110, 235, 
                                                  //| 49, 106, 176), List(53, 227, 77, 225, 243, 107, 116, 228, 168, 82, 226, 25
                                                  //| 4, 197, 36, 206, 25, 6, 65, 18, 234, 185, 59, 42, 200, 116), List(151, 37,
                                                  //|  28, 180, 164, 150, 75, 194, 111, 238, 174, 195, 180, 17, 59, 208, 115, 20
                                                  //| , 122, 209, 214, 102, 171, 111, 234), List(247, 71, 176, 103, 0, 107, 39, 
                                                  //| 253, 133, 244, 33, 137, 108, 193, 161, 32, 127, 164, 38, 196, 71, 144, 202
                                                  //| , 47, 193), List(151, 71, 124, 23, 81, 92, 160, 79, 40, 227, 236, 116, 108
                                                  //| , 252, 24, 237, 162, 4, 102, 67, 14, 76, 162, 83, 227), List(70, 209, 38, 
                                                  //| 23, 10, 26, 39, 99, 224, 124, 252, 143, 30, 149, 153, 237, 174, 105, 255, 
                                                  //| 99, 24, 233, 171, 162, 23), List(202, 71, 253, 225, 105, 205, 172, 35, 196
                                                  //| , 191, 142, 152, 246, 237, 244, 196, 74, 223, 19, 166, 127, 198, 30, 44, 1
                                                  //| 93), List(109, 208, 43, 22, 242, 124, 20, 90, 168, 38, 102, 47, 162, 96, 1
                                                  //| 53, 250, 204, 31, 102, 145, 199, 102, 22, 228, 124), List(247, 184, 28, 13
                                                  //| 7, 242, 163, 124, 251, 111, 216, 11, 205, 162, 46, 237, 3, 202, 68, 77, 17
                                                  //| 6, 126, 233, 50, 179, 118), List(46, 157, 38, 23, 242, 72, 145, 126, 249, 
                                                  //| 74, 174, 152, 126, 193, 153, 98, 6, 223, 138, 177, 78, 233, 190, 185, 169)
                                                  //| , List(53, 50, 168, 252, 10, 228, 210, 208, 4, 111, 103, 85, 181, 178, 237
                                                  //| , 84, 7, 40, 252, 193, 138, 22, 112, 5, 193), List(120, 209, 77, 135, 242,
                                                  //|  207, 94, 90, 216, 151, 173, 195, 137, 178, 178, 66, 178, 16, 95, 117, 245
                                                  //| , 188, 171, 76, 169), List(247, 94, 121, 12, 240, 244, 62, 115, 63, 216, 1
                                                  //| 74, 85, 97, 219, 24, 208, 19, 15, 129, 225, 214, 233, 194, 108, 23), List(
                                                  //| 215, 227, 38, 207, 104, 228, 37, 253, 236, 163, 174, 252, 180, 208, 237, 2
                                                  //| 08, 4, 40, 29, 177, 25, 60, 241, 15, 134), List(247, 134, 190, 215, 206, 7
                                                  //| 2, 125, 234, 63, 200, 59, 8, 219, 221, 61, 208, 150, 65, 160, 177, 78, 233
                                                  //| , 22, 76, 101), List(26, 79, 111, 103, 2, 231, 163, 234, 250, 151, 252, 47
                                                  //| , 170, 199, 237, 176, 226, 31, 153, 72, 63, 233, 241, 198, 148), List(26, 
                                                  //| 59, 110, 151, 19, 244, 244, 14, 199, 75, 103, 152, 125, 185, 24, 99, 202, 
                                                  //| 31, 18, 114, 14, 59, 171, 230, 144), List(191, 47, 129, 241, 90, 207, 124,
                                                  //|  3, 174, 111, 252, 254, 221, 149, 87, 25, 202, 62, 193, 196, 76, 59, 224, 
                                                  //| 83, 72), List(238, 171, 182, 23, 1, 244, 19, 102, 150, 111, 252, 254, 155,
                                                  //|  199, 82, 66, 206, 4, 137, 177, 78, 176, 152, 73, 28), List(247, 184, 168,
                                                  //|  241, 242, 205, 214, 14, 45, 76, 200, 85, 32, 161, 153, 208, 178, 65, 229,
                                                  //|  173, 215, 185, 50, 162, 193), List(46, 42, 43, 167, 164, 228, 170, 32, 14
                                                  //| 7, 74, 226, 27, 170, 248, 12, 219, 204, 16, 241, 81, 167, 56, 50, 76, 234)
                                                  //| , List(225, 213, 35, 241, 146, 221, 124, 90, 193, 252, 52, 71, 165, 149, 1
                                                  //| 53, 177, 83, 223, 77, 177, 207, 233, 206, 83, 193), List(56, 184, 110, 32,
                                                  //|  37, 43, 25, 149, 170, 183, 226, 47, 121, 178, 214, 119, 44, 185, 219, 91,
                                                  //|  35, 144, 241, 83, 193), List(2, 104, 168, 136, 1, 155, 235, 216, 111, 4, 
                                                  //| 165, 45, 125, 149, 24, 219, 12, 40, 163, 208, 214, 221, 171, 106, 28), Lis
                                                  //| t(13, 104, 35, 136, 83, 39, 249, 32, 36, 115, 252, 161, 165, 149, 24, 177,
                                                  //|  174, 164, 163, 22, 24, 144, 206, 76, 28), List(117, 50, 176, 241, 201, 24
                                                  //| 4, 23, 200, 174, 4, 11, 223, 221, 247, 212, 176, 12, 62, 102, 203, 76, 176
                                                  //| , 93, 122, 169), List(92, 208, 111, 241, 242, 207, 37, 251, 147, 252, 252,
                                                  //|  162, 165, 199, 212, 9, 162, 121, 122, 147, 158, 43, 112, 198, 171), List(
                                                  //| 117, 104, 28, 206, 210, 124, 31, 32, 73, 38, 33, 155, 233, 193, 24, 166, 6
                                                  //| , 164, 77, 106, 37, 102, 50, 179, 193), List(246, 9, 111, 167, 240, 72, 75
                                                  //| , 3, 236, 227, 97, 195, 20, 92, 153, 84, 127, 87, 193, 189, 220, 185, 198,
                                                  //|  124, 145), List(191, 37, 165, 192, 164, 43, 193, 191, 63, 124, 23, 207, 3
                                                  //| 0, 104, 59, 237, 231, 89, 122, 177, 76, 21, 152, 13, 124), List(180, 21, 1
                                                  //| 11, 93, 37, 94, 39, 160, 63, 180, 103, 47, 155, 237, 24, 66, 174, 68, 43, 
                                                  //| 145, 199, 21, 228, 108, 193), List(44, 209, 165, 167, 248, 161, 39, 188, 1
                                                  //| 11, 127, 162, 85, 30, 104, 237, 66, 231, 89, 122, 196, 57, 134, 224, 15, 2
                                                  //| 8), List(191, 20, 124, 167, 210, 207, 75, 201, 249, 216, 11, 72, 140, 173,
                                                  //|  109, 84, 237, 31, 29, 151, 245, 195, 42, 211, 169), List(247, 104, 176, 2
                                                  //| 07, 10, 69, 19, 208, 240, 76, 102, 47, 181, 178, 244, 151, 206, 31, 122, 1
                                                  //| 45, 138, 21, 50, 32, 193), List(120, 104, 35, 23, 216, 161, 125, 200, 9, 1
                                                  //| 51, 137, 143, 122, 162, 128, 71, 226, 30, 137, 213, 214, 235, 207, 85, 23)
                                                  //| , List(53, 21, 111, 93, 37, 94, 39, 253, 236, 200, 252, 47, 165, 178, 237,
                                                  //|  66, 206, 89, 19, 83, 245, 21, 228, 199, 193), List(215, 227, 77, 179, 242
                                                  //| , 116, 23, 32, 9, 175, 33, 152, 165, 167, 167, 84, 228, 242, 215, 177, 214
                                                  //| , 233, 49, 206, 193), List(247, 104, 35, 136, 109, 155, 220, 32, 193, 115,
                                                  //|  252, 45, 89, 161, 24, 219, 109, 164, 163, 173, 127, 163, 171, 189, 28), L
                                                  //| ist(242, 229, 176, 103, 205, 171, 145, 32, 147, 191, 89, 195, 181, 149, 59
                                                  //| , 237, 101, 15, 254, 121, 163, 245, 198, 225, 8), List(26, 104, 165, 180, 
                                                  //| 242, 235, 132, 74, 111, 146, 89, 8, 227, 230, 24, 25, 204, 214, 17, 177, 1
                                                  //| 55, 93, 184, 126, 95), List(216, 227, 176, 167, 201, 72, 20, 253, 236, 111
                                                  //| , 200, 21, 86, 161, 128, 119, 204, 65, 178, 147, 71, 29, 50, 200, 242), Li
                                                  //| st(180, 227, 168, 225, 105, 107, 219, 153, 63, 82, 52, 136, 197, 159, 109,
                                                  //|  25, 237, 84, 17, 196, 245, 59, 207, 15, 227), List(26, 94, 97, 32, 205, 2
                                                  //| 22, 177, 73, 147, 216, 103, 155, 89, 106, 153, 25, 206, 31, 129, 234, 192,
                                                  //|  134, 150, 15, 28), List(180, 59, 165, 240, 233, 92, 75, 200, 193, 227, 25
                                                  //| 2, 89, 198, 161, 166, 219, 107, 31, 38, 67, 110, 221, 228, 83, 176), List(
                                                  //| 247, 206, 38, 225, 90, 171, 37, 90, 223, 4, 89, 78, 227, 120, 4, 157, 150,
                                                  //|  64, 42, 188, 245, 98, 224, 13, 171), List(118, 24, 53, 103, 105, 181, 125
                                                  //| , 125, 191, 151, 52, 195, 162, 208, 195, 176, 101, 223, 19, 144, 63, 11, 4
                                                  //| 2, 108, 124), List(247, 227, 110, 12, 150, 72, 125, 35, 63, 74, 162, 47, 1
                                                  //| 17, 120, 4, 151, 150, 65, 160, 177, 78, 240, 22, 230, 101), List(247, 32, 
                                                  //| 168, 116, 150, 107, 214, 188, 147, 82, 68, 21, 227, 159, 120, 71, 101, 164
                                                  //| , 102, 151, 245, 235, 171, 200, 134), List(225, 104, 164, 203, 37, 72, 219
                                                  //| , 153, 132, 74, 162, 107, 233, 161, 36, 84, 192, 214, 241, 177, 180, 21, 1
                                                  //| 71, 228, 72), List(112, 157, 35, 37, 210, 222, 75, 201, 147, 82, 173, 152,
                                                  //|  197, 178, 211, 84, 237, 223, 215, 177, 245, 233, 243, 199, 116), List(180
                                                  //| , 227, 59, 184, 65, 43, 124, 155, 63, 38, 142, 254, 108, 149, 230, 84, 14,
                                                  //|  214, 34, 209, 215, 144, 22, 47, 98), List(247, 160, 111, 225, 150, 115, 6
                                                  //| 8, 102, 134, 216, 142, 137, 154, 106, 230, 208, 101, 187, 38, 67, 245, 46,
                                                  //|  207, 85, 193), List(219, 32, 156, 12, 153, 171, 23, 14, 147, 146, 11, 8, 
                                                  //| 30, 162, 255, 205, 44, 4, 193, 196, 48, 188, 171, 66, 178), List(247, 32, 
                                                  //| 164, 12, 150, 168, 145, 14, 106, 111, 162, 21, 155, 159, 247, 155, 83, 10,
                                                  //|  160, 121, 76, 134, 171, 230, 234), List(247, 98, 38, 137, 206, 72, 39, 25
                                                  //| 3, 236, 216, 113, 136, 125, 199, 141, 9, 12, 223, 102, 176, 71, 144, 198, 
                                                  //| 58, 193), List(238, 227, 168, 161, 233, 72, 19, 90, 63, 38, 101, 72, 125, 
                                                  //| 96, 153, 6, 14, 31, 102, 193, 167, 56, 22, 108, 23), List(247, 24, 1, 167,
                                                  //|  153, 163, 37, 251, 191, 151, 252, 195, 155, 162, 141, 84, 127, 242, 19, 1
                                                  //| 44, 63, 233, 49, 108, 144), List(230, 96, 43, 23, 212, 181, 145, 126, 9, 7
                                                  //| 5, 103, 229, 167, 173, 24, 151, 214, 4, 254, 177, 24, 235, 207, 199, 234),
                                                  //|  List(180, 139, 165, 50, 2, 92, 75, 253, 63, 227, 70, 152, 198, 149, 61, 2
                                                  //| 19, 228, 31, 102, 177, 71, 221, 171, 19, 7), List(247, 40, 110, 225, 161, 
                                                  //| 43, 89, 35, 199, 36, 140, 130, 25, 120, 4, 154, 25, 163, 160, 188, 215, 24
                                                  //| 0, 148, 230, 179), List(47, 238, 182, 156, 153, 182, 68, 73, 111, 244, 142
                                                  //| , 72, 165, 199, 153, 176, 121, 82, 122, 117, 245, 144, 187, 82, 23), List(
                                                  //| 247, 163, 1, 203, 114, 108, 19, 251, 250, 244, 162, 152, 155, 149, 4, 71, 
                                                  //| 108, 223, 153, 196, 189, 162, 49, 83, 227), List(120, 94, 176, 37, 216, 43
                                                  //| , 75, 14, 111, 111, 200, 85, 20, 178, 24, 151, 106, 31, 137, 117, 167, 188
                                                  //| , 243, 162, 77), List(180, 59, 35, 225, 243, 94, 170, 200, 168, 94, 137, 2
                                                  //| 20, 65, 149, 153, 102, 6, 89, 77, 117, 138, 81, 190, 46, 146), List(191, 2
                                                  //| 13, 111, 124, 153, 181, 39, 153, 160, 76, 23, 8, 165, 199, 214, 208, 19, 7
                                                  //| 2, 254, 145, 127, 176, 198, 32, 176), List(40, 184, 111, 23, 206, 181, 163
                                                  //| , 251, 63, 56, 226, 45, 165, 14
                                                  //| Output exceeds cutoff limit.
 val newBonusSolution = evolvedSpecimens._1.find(x => numberOfDistinctSums(x)  == 340).get
                                                  //> newBonusSolution  : List[Int] = List(53, 50, 168, 252, 10, 228, 210, 208, 
                                                  //| 4, 111, 103, 85, 181, 178, 237, 84, 7, 40, 252, 193, 138, 22, 112, 5, 193)
                                                  //| 
 
 // Here's a sample solution...
 val sampleSolution =List(89, 210, 229, 120, 59, 211, 251, 126, 65, 163, 165, 188, 118, 76, 92, 75, 139, 56, 198, 242, 146, 254, 37, 132, 142)
                                                  //> sampleSolution  : List[Int] = List(89, 210, 229, 120, 59, 211, 251, 126, 6
                                                  //| 5, 163, 165, 188, 118, 76, 92, 75, 139, 56, 198, 242, 146, 254, 37, 132, 1
                                                  //| 42)
 
 numberOfDistinctSums(sampleSolution)             //> res1: Int = 340
 
 
  def printInHexFormat(l : List[Int]) = l.grouped(5).map( _.map( i => i.toHexString).mkString(" ") ).foreach(println)
                                                  //> printInHexFormat: (l: List[Int])Unit

 printInHexFormat(sampleSolution)                 //> 59 d2 e5 78 3b
                                                  //| d3 fb 7e 41 a3
                                                  //| a5 bc 76 4c 5c
                                                  //| 4b 8b 38 c6 f2
                                                  //| 92 fe 25 84 8e
 printInHexFormat(newBonusSolution)               //> 35 32 a8 fc a
                                                  //| e4 d2 d0 4 6f
                                                  //| 67 55 b5 b2 ed
                                                  //| 54 7 28 fc c1
                                                  //| 8a 16 70 5 c1
 //def print5x5(s: String) = s.toCharArray.grouped(5).foreach(a => println(a.mkString))
 

/*
 var bonustrials = 0
 def isSolved(): List[IndexedSeq[Int]]  = {
  if (bonustrials % 100000 == 0)
   println
 
  val g = (0 until 5).toList.map(i =>
   (0 until 5).map( j => scala.util.Random.nextInt(256) ))
	
	val num = numberOfDistinctSums(g)
  if (bonustrials % 100000 == 0)
   println(g + " " + num)
 
 bonustrials +=1
  if (numberOfDistinctSums(g) == allValidCombosList.size) // 340
   g
  else
   isSolved()
 }
 */
  // Generate all solutions given assumptions so far and remaining pieces left to work with
  var find_counter = 0                            //> find_counter  : Int = 0
  def find_maximal_set(grid: List[Array[Int]], exploredSoFar: Set[(Int, Int)] = Set(),
   scoreSoFar: Int = 0, offLimits: Set[(Int, Int)] = Set(), scoreToBeat: Int = 0): (Set[(Int, Int)], Int) = {
    if (find_counter %10000 == 0)
    println("exploredSoFar.size = " + exploredSoFar.size + " offLimits.size = " + offLimits.size + " scoreSoFar = " + scoreSoFar + " scoreToBeat " + scoreToBeat)
    find_counter += 1
    
    val remaining = ((for {
      i <- (0 until grid.size).toSet[Int]
      j <- 0 until grid.head.size
    } yield (i, j)) -- exploredSoFar -- offLimits)//.toList.sorted

    val remainingThatCanBeVisited = remaining filter canBeVisit(exploredSoFar, grid.size)
    
    val bestCase = remaining.map( f => grid(f._1)(f._2) ).filter( _ > 0).sum
    
    if ( scoreSoFar + bestCase <= scoreToBeat || remainingThatCanBeVisited.isEmpty )
      (exploredSoFar, scoreSoFar) // Maybe return Set( Set(), 0 ) ? and then add it up when we come back?
    else {
      val areaToConsider = remainingThatCanBeVisited.maxBy(f => grid(f._1)(f._2))
      val areasScore = grid(areaToConsider._1)(areaToConsider._2)
      if (areasScore >= 0)
        find_maximal_set(grid, exploredSoFar + areaToConsider, scoreSoFar + areasScore, offLimits, scala.math.max(scoreSoFar + areasScore, scoreToBeat))
      else {
        val included = find_maximal_set(grid, exploredSoFar + areaToConsider, scoreSoFar + areasScore, offLimits,                  List(scoreSoFar, scoreToBeat).max)
        val excluded = find_maximal_set(grid, exploredSoFar,                  scoreSoFar,              offLimits + areaToConsider, List(scoreSoFar, scoreToBeat, included._2).max)
     //   println("included " + included)
     //   println("excluded " + excluded)
        if (included._2 > excluded._2) included else excluded
      }
    }
  }                                               //> find_maximal_set: (grid: List[Array[Int]], exploredSoFar: Set[(Int, Int)],
                                                  //|  scoreSoFar: Int, offLimits: Set[(Int, Int)], scoreToBeat: Int)(Set[(Int, 
                                                  //| Int)], Int)

 def main(args: Array[String]): Unit = {
  println("Example problem: ")
  val exampleSolution = find_maximal_set(gridExample)
  println(exampleSolution._1.toList.sorted + " with cost " + exampleSolution._2)
  assert(exampleSolution._2 == 424)
  
/*  val bonusSolution = isSolved()
  bonusSolution.foreach( row => println( row.map( _.toHexString ).mkString(" ") ))
  */
    /*val sol = find_maximal_set(grid2020)
    println(sol._1.toList.sorted)
    println(sol._2)
    */
    /*
    Solution is:
     List((0,0), (0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10), (0,11), (0,12), (0,13), (0,14), (0,15), (0,16), (0,17), (0,18), (0,19), (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13), (1,14), (1,15), (1,16), (1,17), (1,18), (1,19), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (2,10), (2,11), (2,12), (2,13), (2,14), (2,15), (2,16), (2,17), (2,18), (2,19), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (3,10), (3,11), (3,12), (3,13), (3,14), (3,15), (3,16), (3,17), (3,18), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9), (4,10), (4,11), (4,12), (4,13), (4,14), (4,15), (4,16), (4,17), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9), (5,10), (5,11), (5,12), (5,13), (5,14), (5,15), (5,16), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (6,12), (6,14), (6,15), (7,0), (7,1), (7,2), (7,4), (7,7), (8,0), (8,1), (9,0))
1424
*/
 }                                                //> main: (args: Array[String])Unit
}