Short answer:
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
[(199,291), (200,290), (206,284), (207,283), (208,281), (211,279), (212,278), (213,277), (214,274), (216,272), (218,269), (220,267), (223,265), (226,263), (228,258), (230,255), (232,253), (233,252), (234,250), (235,249), (239,246), (240,243), (241,241), (243,237), (246,230), (248,228), (250,225), (251,224), (252,222), (253,218), (254,217), (255,216), (262,212), (266,206), (267,205), (269,204), (274,199), (276,197), (277,195), (278,193), (279,192), (281,190), (282,189), (283,188), (284,185), (288,183), (293,177), (294,175), (296,172), (297,171), (299,169), (300,168), (302,165), (303,164), (307,161), (308,160), (309,158), (310,156), (313,153), (315,149), (318,146), (319,145), (320,142), (322,141), (325,137), (328,135), (331,131), (332,128), (333,124), (335,123), (336,121), (339,119), (340,116), (341,115), (342,113), (344,109), (347,107), (349,105), (351,103), (353,101), (354,99), (355,96), (356,93), (358,90), (359,89), (360,88), (363,86), (364,84), (366,82), (369,80), (370,78), (371,77), (372,76), (373,75), (376,72), (377,71), (378,70), (379,67), (382,65), (383,62), (384,61), (385,59), (388,57), (392,54), (393,53), (394,48), (395,46), (396,43), (399,40), (402,38), (405,36), (409,30), (413,27), (414,26), (415,25), (416,24), (419,22), (422,19), (429,14), (431,12), (436,6), (437,5), (438,4), (440,1), (442,0)] 


Has 125 summands. 



Bonus question with 300 digits:

100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
[(299,438), (301,433), (302,432), (303,430), (304,427), (305,426), (306,423), (308,422), (311,419), (312,417), (313,416), (314,414), (319,410), (322,408), (323,406), (324,405), (329,402), (331,400), (333,397), (334,395), (337,392), (338,391), (340,389), (342,387), (343,383), (344,380), (345,378), (347,375), (349,373), (351,371), (352,370), (353,369), (354,368), (355,366), (358,364), (361,361), (362,360), (365,358), (366,356), (368,355), (371,352), (374,349), (375,348), (376,346), (377,343), (379,342), (380,339), (381,337), (382,336), (386,333), (387,332), (390,330), (396,325), (397,323), (399,321), (400,320), (402,319), (403,317), (404,316), (406,313), (407,312), (409,310), (413,307), (414,306), (415,305), (417,304), (420,298), (421,297), (425,294), (426,293), (427,292), (428,291), (429,290), (430,288), (431,287), (432,286), (434,284), (438,280), (441,278), (442,276), (443,275), (448,271), (453,267), (455,265), (456,262), (457,259), (458,258), (459,257), (460,256), (465,253), (467,248), (469,247), (470,245), (471,244), (472,243), (473,241), (477,235), (480,232), (483,230), (484,228), (486,226), (487,225), (490,223), (492,221), (493,220), (497,217), (498,216), (500,214), (502,210), (503,209), (504,204), (505,203), (508,201), (509,200), (511,198), (514,195), (515,194), (516,193), (520,190), (521,189), (522,187), (523,186), (524,185), (526,184), (528,182), (529,177), (532,175), (533,173), (537,170), (538,169), (542,165), (544,163), (546,162), (548,159), (549,157), (550,153), (553,151), (555,149), (558,147), (560,145), (564,141), (568,138), (569,137), (570,136), (572,135), (574,132), (580,127), (582,125), (583,123), (587,119), (589,118), (593,114), (599,109), (603,107), (605,102), (607,97), (608,96), (609,94), (610,93), (612,91), (614,87), (616,86), (619,82), (622,78), (623,73), (624,72), (625,70), (626,69), (627,67), (629,64), (632,62), (633,59), (634,56), (636,53), (637,52), (639,50), (640,49), (641,48), (643,47), (644,42), (646,40), (647,39), (648,37), (650,36), (651,34), (653,30), (654,29), (655,28), (656,26), (657,25), (661,22), (662,20), (663,19), (669,15), (671,13), (673,7), (676,5), (677,4), (680,1), (682,0)] 

Has 200 summands. 

Long answer:
Oh boy this was a toughy. 
I started by doing a dynamic programming approaching where I worked my way up increasing powers of 2, recursing by subtracting off highest powers of 3.
This approach basically never found a representation for a given large target number, even though it would find all the representations for a small target number. 
I was stuck for a while until I realized I could divide the even numbers by 2 and the constraints would still be satisfied. This was much better than subtraction! 
For even n
r(n) = 2*r(n/2). No additional terms necessary. 
When n is odd we must subtract an odd number to make it even again (or else we'll have 2 odd numbers in the representation, and since powers of 3 are the only odd numbers, one would divide the other). 
So greedily we'll take the largest power of 3 less than or equal to n. 
n-3^i => next n (which will be even) 

Where i is chosen such that 3^i <=n <3^(i+1).

Since the next n will be even, we only have to worry about representing (n-3^i)/2
But from our choice of i, n-3^i <3^(i+1)-3^i
=2*3^i
So our next potentially odd n = (n-3^i)/2<3^i, which means it won't contain any powers of 3 that large. And since next n is even, it won't contain any powers of 3. 

So far so good... But then I went to randomly choose 200 digits composed of 0s and 1s and counted the number of summands for each. 

I let it run for a while, and thought about it some more. I thought if I take it mod 6, I'd only have to add a summand when n=1 or 5 mod 6. Other cases could be reduced 
6*r(n/6)
3*r(n/3)
2*r(n/2)

This should reduce the number of summands from half the cases (every odd n) to every third case. 


Hmmm, with this approach the number of summands appeared to be normally distributed around 183 or so with a standard deviation around 7. I calculated that I would need around 150,000 samples before I could expect 1 to be below 150. 

So I let my program chug away at it over night and it returned a solution after 15 hours!

I did the probability calculation for the bonus question and it would take forever, getting so many standard deviations below the mean. So there's got to be another trick. 

I googled around and found some very high level papers regarding the d-completeness of 3-smooth numbers. We have the famous Erdos to thank for this problem apperently! 

I left for vacation before submitting the non-bonus solution and on my first day away I thought of a surprisingly simple idea. I was thinking of a way to construct a target number that is highly divisible by 2 to start. Then we can get a head start on the recursive algorithm without incurring any summands. In dawned on me that 10^n is 2^n *5^n, so there is a 2^199 factor we can divide out if we start with just the lowest 200 digit number! 

Oh so excited, but no computer to run it on! I googled for an online scala repl and after losing my work 3 or 4 times on a couple of different sites trying to code over my smartphone, I decided to type it out in a Gmail draft email and paste it in, due to the infuriating overwriting bug in the repl.... But I digress. 

I've attached a screenshot of the exciting finished code. I'll spare you the dozens of other dead-end approaches that I don't have access to anyway.

That was a really fun one! I'm pretty proud of myself that I solved it "the hard way".

Chris Shannon 
(from Calgary Canada)
