Short answer:
//Start
10 A= 120
20 B = 25
30 JMP_ZERO B 80 // goto b
// a
40 R = A
50 B = B mod A
60 JMP_ZERO B 180 // goto f
70 CHAOS 40, 80  // goto a or b
// b
80 R = B
90 A = A % B
100 JMP_ZERO A 180 // goto f
110 CHAOS 120, 160 // goto c or d
// c is a swap
120 T = A
130 A = B
140 B = T
150 CHAOS 40, 80
// d
160 A = A % B // this could set A to zero
so we must check at b if A==0, doing b again
won't hurt.
170 CHAOS 80, 160
// f, the return
180 RETURN R


For the bonus question (*)
//Start
10 A= 120
20 B = 25
30 JMP_ZERO B 50 /// goto a
40 JMP 60
// a
50 JMP 50
// b
60 JMP 70
// c
70 R = A
80 B = B mod A
90 JMP_ZERO B 120 // goto e
100 CHAOS 70, 110  // c or d
// d
110 R = B
120 A = A mod B
130 JMP_ZERO A 140 // goto f
140 CHAOS 70, 110 // goto c or d
// e
120 JMP_ZERO B 140
130 CHAOS 70, 100
// f, the return
140 RETURN R


Long answer:
We start by finding a graph with the required path counts.
By inspection, there's no direct path (path length ==1) between start and end.
Since there are 2 paths of length 2, that means that we have a diamond. start -> a -> end, and start -> b -> end.
From here on out I found it best program the combinations and find the appropriate graph, enforcing that start goes to both a and b, and that a and b go to end.

I used a scanLeft, to apply substitution rules. After n applications, we'll return a list of nodes we are in after n steps (or a slice of the tree at depth n).

 val start = List('a','b') 
 val bonusRules = Map('e' -> List('c', 'd', 'f'), 'f' -> List(), 'a' -> List('a'),
     'b' -> List('c'), 'c' -> List( 'c', 'd','e'), 'z' -> List(), 'd' -> List('c', 'd','f'))
 (0 to 12).scanLeft(start)( (a,b) => a.flatMap(bonusRules)).map( _.count(_ == 'f'))
//  = Vector(0, 0, 0, 2, 4, 10, 24, 58, 140, 338, 816, 1970, 4756, 11482)

And to iterate through the combinations:

val sol = for {
   an <- (1 to 3).toIterator
   a <- ('a' to 'f').toList.combinations(an).map( l => (l.toSet /* taking out the direct path to f for the bonus question+ 'f'*/).toList).toIterator
   bn <- 1 to 3
   b <- ('a' to 'f').toList.combinations(bn).map( l => (l.toSet /*+ 'f'*/).toList)
   cn <- 1 to 3
   c <- ('a' to 'f').toList.combinations(cn)
   dn <- 1 to 3
   d <- ('a' to 'f').toList.combinations(dn)
   en <- 0 to 3
   e <- ('a' to 'f').toList.combinations(en)
   val rules: Map[Char, List[Char]] = Map(
    'a' -> a,
    'b' -> b,
    'c' -> c,
    'd' -> d,
    'e' -> e,
    'f' -> Nil,
    'z' -> Nil
   )

For the bonus question, I had issues with out of memory errors so I switched to a matrix representation of the graph, similar to the COVID spreading Ponder This from a few months ago. Adding 1 to the length of a path is the equivalent of a state vector by the transition matrix. And the state vector will "count" the number of paths to each node, so that's handy.


 def recurs(mRunning: IndexedSeq[Int], m: IndexedSeq[List[Int]], d: Int): Boolean  = {
  if (d==0)
   recurs(IndexedSeq(1,1,0,0,0,0), m, 1)
  else if (d == 7 && mRunning.last == 0 || d > 7 && mRunning.last > 10000)
   false
  else if (d < 20)
  {
  if (mRunning.last == 1970)
   true
  else
   recurs(multiplyMatColumn(m, mRunning), m, d+1)
  }
  else
   false
 }

And similar to the COVID Ponder This, I wasted a lot of compute time by multiplying the matrix by the matrix, instead of matrix by vector.

With the graphs handy, the last thing to do was to shoehorn in a Greatest Common Divisor algorithm.

I used the identity the gcd( a , b) == gcd (a, b %a) == gcd (a%b, b). So it doesn't matter which way you do the mod.
And a%b = (a%b) %b, i.e. it doesn't matter if you repeat the mod operation.
So in that sense, gcd is very forgiving in its implementation. Just have to ensure that you are not taking mod 0.

I've attached a couple images of the graphs used.

Thanks for another fun puzzle.

Chris Shannon
(from Calgary Canada)


