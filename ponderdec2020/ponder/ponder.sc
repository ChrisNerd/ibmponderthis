object ponder {
 val all567Sums = for {
  p1 <- 101 to 567/5 by 2
  p2 <- p1 to (567-p1)/4 by 2
  p3 <- p2 to (567-p1-p2)/3 by 2
  p4 <- p3 to (567-p1-p2-p3)/2 by 2
  val p5 = 567-p1-p2-p3-p4
  if p5 <= 149
 } yield List(p1,p2,p3,p4,p5)                     //> all567Sums  : scala.collection.immutable.IndexedSeq[List[Int]] = Vector(List
                                                  //| (101, 101, 101, 115, 149), List(101, 101, 101, 117, 147), List(101, 101, 101
                                                  //| , 119, 145), List(101, 101, 101, 121, 143), List(101, 101, 101, 123, 141), L
                                                  //| ist(101, 101, 101, 125, 139), List(101, 101, 101, 127, 137), List(101, 101, 
                                                  //| 101, 129, 135), List(101, 101, 101, 131, 133), List(101, 101, 103, 113, 149)
                                                  //| , List(101, 101, 103, 115, 147), List(101, 101, 103, 117, 145), List(101, 10
                                                  //| 1, 103, 119, 143), List(101, 101, 103, 121, 141), List(101, 101, 103, 123, 1
                                                  //| 39), List(101, 101, 103, 125, 137), List(101, 101, 103, 127, 135), List(101,
                                                  //|  101, 103, 129, 133), List(101, 101, 103, 131, 131), List(101, 101, 105, 111
                                                  //| , 149), List(101, 101, 105, 113, 147), List(101, 101, 105, 115, 145), List(1
                                                  //| 01, 101, 105, 117, 143), List(101, 101, 105, 119, 141), List(101, 101, 105, 
                                                  //| 121, 139), List(101, 101, 105, 123, 137), List(101, 101, 105, 125, 135), Lis
                                                  //| t(101, 101, 105, 127, 133), List(101, 101, 105, 129, 131), List(101, 101, 10
                                                  //| 7, 109, 149), List(101, 101, 107, 111, 147), List(101, 101, 107, 113, 145), 
                                                  //| List(101, 101, 107, 115, 143), List(101, 101, 107, 117, 141), List(101, 101,
                                                  //|  107, 119, 139), List(101, 101, 107, 121, 137), List(101, 101, 107, 123, 135
                                                  //| ), List(101, 101, 107, 125, 133), List(101, 101, 107, 127, 131), List(101, 1
                                                  //| 01, 107, 129, 129), List(101, 101, 109, 109, 147), List(101, 101, 109, 111, 
                                                  //| 145), List(101, 101, 109, 113, 143), List(101, 101, 109, 115, 141), List(101
                                                  //| , 101, 109, 117, 139), List(101, 101, 109, 119, 137), List(101, 101, 109, 12
                                                  //| 1, 135), List(101, 101, 109, 123, 133), List(101, 101, 109, 125, 131), List(
                                                  //| 101, 101, 109, 127, 129), List(101, 101, 111, 111, 143), List(101, 101, 111,
                                                  //|  113, 141), List(101, 101, 111, 115, 139), List(101, 101, 111, 117, 137), Li
                                                  //| st(101, 101, 111, 119, 135), List(101, 101, 111, 121, 133), List(101, 101, 1
                                                  //| 11, 123, 131), List(101, 101, 111, 125, 129), List(101, 101, 111, 127, 127),
                                                  //|  List(101, 101, 113, 113, 139), List(101, 101, 113, 115, 137), List(101, 101
                                                  //| , 113, 117, 135), List(101, 101, 113, 119, 133), List(101, 101, 113, 121, 13
                                                  //| 1), List(101, 101, 113, 123, 129), List(101, 101, 113, 125, 127), List(101, 
                                                  //| 101, 115, 115, 135), List(101, 101, 115, 117, 133), List(101, 101, 115, 119,
                                                  //|  131), List(101, 101, 115, 121, 129), List(101, 101, 115, 123, 127), List(10
                                                  //| 1, 101, 115, 125, 125), List(101, 101, 117, 117, 131), List(101, 101, 117, 1
                                                  //| 19, 129), List(101, 101, 117, 121, 127), List(101, 101, 117, 123, 125), List
                                                  //| (101, 101, 119, 119, 127), List(101, 101, 119, 121, 125), List(101, 101, 119
                                                  //| , 123, 123), List(101, 101, 121, 121, 123), List(101, 103, 103, 111, 149), L
                                                  //| ist(101, 103, 103, 113, 147), List(101, 103, 103, 115, 145), List(101, 103, 
                                                  //| 103, 117, 143), List(101, 103, 103, 119, 141), List(101, 103, 103, 121, 139)
                                                  //| , List(101, 103, 103, 123, 137), List(101, 103, 103, 125, 135), List(101, 10
                                                  //| 3, 103, 127, 133), List(101, 103, 103, 129, 131), List(101, 103, 105, 109, 1
                                                  //| 49), List(101, 103, 105, 111, 147), List(101, 103, 105, 113, 145), List(101,
                                                  //|  103, 105, 115, 143), List(101, 103, 105, 117, 141), List(101, 103, 105, 119
                                                  //| , 139), List(101, 103, 105, 121, 137), List(101, 103, 105, 123, 135), List(1
                                                  //| 01, 103, 105, 125, 133), List(101, 103, 105, 127, 131), List(101, 103, 105, 
                                                  //| 129, 129), List(101, 103, 107, 107, 149), List(101, 103, 107, 109, 147), Lis
                                                  //| t(101, 103, 107, 111, 145), List(101, 103, 107, 113, 143), List(101, 103, 10
                                                  //| 7, 115, 141), List(101, 103, 107, 117, 139), List(101, 103, 107, 119, 137), 
                                                  //| List(101, 103, 107, 121, 135), List(101, 103, 107, 123, 133), List(101, 103,
                                                  //|  107, 125, 131), List(101, 103, 107, 127, 129), List(101, 103, 109, 109, 145
                                                  //| ), List(101, 103, 109, 111, 143), List(101, 103, 109, 113, 141), List(101, 1
                                                  //| 03, 109, 115, 139), List(101, 103, 109, 117, 137), List(101, 103, 109, 119, 
                                                  //| 135), List(101, 103, 109, 121, 133), List(101, 103, 109, 123, 131), List(101
                                                  //| , 103, 109, 125, 129), List(101, 103, 109, 127, 127), List(101, 103, 111, 11
                                                  //| 1, 141), List(101, 103, 111, 113, 139), List(101, 103, 111, 115, 137), List(
                                                  //| 101, 103, 111, 117, 135), List(101, 103, 111, 119, 133), List(101, 103, 111,
                                                  //|  121, 131), List(101, 103, 111, 123, 129), List(101, 103, 111, 125, 127), Li
                                                  //| st(101, 103, 113, 113, 137), List(101, 103, 113, 115, 135), List(101, 103, 1
                                                  //| 13, 117, 133), List(101, 103, 113, 119, 131), List(101, 103, 113, 121, 129),
                                                  //|  List(101, 103, 113, 123, 127), List(101, 103, 113, 125, 125), List(101, 103
                                                  //| , 115, 115, 133), List(101, 103, 115, 117, 131), List(101, 103, 115, 119, 12
                                                  //| 9), List(101, 103, 115, 121, 127), List(101, 103, 115, 123, 125), List(101, 
                                                  //| 103, 117, 117, 129), List(101, 103, 117, 119, 127), List(101, 103, 117, 121,
                                                  //|  125), List(101, 103, 117, 123, 123), List(101, 103, 119, 119, 125), List(10
                                                  //| 1, 103, 119, 121, 123), List(101, 103, 121, 121, 121), List(101, 105, 105, 1
                                                  //| 07, 149), List(101, 105, 105, 109, 147), List(101, 105, 105, 111, 145), List
                                                  //| (101, 105, 105, 113, 143), List(101, 105, 105, 115, 141), List(101, 105, 105
                                                  //| , 117, 139), List(101, 105, 105, 119, 137), List(101, 105, 105, 121, 135), L
                                                  //| ist(101, 105, 105, 123, 133), List(101, 105, 105, 125, 131), List(101, 105, 
                                                  //| 105, 127, 129), List(101, 105, 107, 107, 147), List(101, 105, 107, 109, 145)
                                                  //| , List(101, 105, 107, 111, 143), List(101, 105, 107, 113, 141), List(101, 10
                                                  //| 5, 107, 115, 139), List(101, 105, 107, 117, 137), List(101, 105, 107, 119, 1
                                                  //| 35), List(101, 105, 107, 121, 133), List(101, 105, 107, 123, 131), List(101,
                                                  //|  105, 107, 125, 129), List(101, 105, 107, 127, 127), List(101, 105, 109, 109
                                                  //| , 143), List(101, 105, 109, 111, 141), List(101, 105, 109, 113, 139), List(1
                                                  //| 01, 105, 109, 115, 137), List(101, 105, 109, 117, 135), List(101, 105, 109, 
                                                  //| 119, 133), List(101, 105, 109, 121, 131), List(101, 105, 109, 123, 129), Lis
                                                  //| t(101, 105, 109, 125, 127), List(101, 105, 111, 111, 139), List(101, 105, 11
                                                  //| 1, 113, 137), List(101, 105, 111, 115, 135), List(101, 105, 111, 117, 133), 
                                                  //| List(101, 105, 111, 119, 131), List(101, 105, 111, 121, 129), List(101, 105,
                                                  //|  111, 123, 127), List(101, 105, 111, 125, 125), List(101, 105, 113, 113, 135
                                                  //| ), List(101, 105, 113, 115, 133), List(101, 105, 113, 117, 131), List(101, 1
                                                  //| 05, 113, 119, 129), List(101, 105, 113, 121, 127), List(101, 105, 113, 123, 
                                                  //| 125), List(101, 105, 115, 115, 131), List(101, 105, 115, 117, 129), List(101
                                                  //| , 105, 115, 119, 127), List(101, 105, 115, 121, 125), List(101, 105, 115, 12
                                                  //| 3, 123), List(101, 105, 117, 117, 127), List(101, 105, 117, 119, 125), List(
                                                  //| 101, 105, 117, 121, 123), List(101, 105, 119, 119, 123), List(101, 105, 119,
                                                  //|  121, 121), List(101, 107, 107, 107, 145), List(101, 107, 107, 109, 143), Li
                                                  //| st(101, 107, 107, 111, 141), List(101, 107, 107, 113, 139), List(101, 107, 1
                                                  //| 07, 115, 137), List(101, 107, 107, 117, 135), List(101, 107, 107, 119, 133),
                                                  //|  List(101, 107, 107, 121, 131), List(101, 107, 107, 123, 129), List(101, 107
                                                  //| , 107, 125, 127), List(101, 107, 109, 109, 141), List(101, 107, 109, 111, 13
                                                  //| 9), List(101, 107, 109, 113, 137), List(101, 107, 109, 115, 135), List(101, 
                                                  //| 107, 109, 117, 133), List(101, 107, 109, 119, 131), List(101, 107, 109, 121,
                                                  //|  129), List(101, 107, 109, 123, 127), List(101, 107, 109, 125, 125), List(10
                                                  //| 1, 107, 111, 111, 137), List(101, 107, 111, 113, 135), List(101, 107, 111, 1
                                                  //| 15, 133), List(101, 107, 111, 117, 131), List(101, 107, 111, 119, 129), List
                                                  //| (101, 107, 111, 121, 127), List(101, 107, 111, 123, 125), List(101, 107, 113
                                                  //| , 113, 133), List(101, 107, 113, 115, 131), List(101, 107, 113, 117, 129), L
                                                  //| ist(101, 107, 113, 119, 127), List(101, 107, 113, 121, 125), List(101, 107, 
                                                  //| 113, 123, 123), List(101, 107, 115, 115, 129), List(101, 107, 115, 117, 127)
                                                  //| , List(101, 107, 115, 119, 125), List(101, 107, 115, 121, 123), List(101, 10
                                                  //| 7, 117, 117, 125), List(101, 107, 117, 119, 123), List(101, 107, 117, 121, 1
                                                  //| 21), List(101, 107, 119, 119, 121), List(101, 109, 109, 109, 139), List(101,
                                                  //|  109, 109, 111, 137), List(101, 109, 109, 113, 135), List(101, 109, 109, 115
                                                  //| , 133), List(101, 109, 109, 117, 131), List(101, 109, 109, 119, 129), List(1
                                                  //| 01, 109, 109, 121, 127), List(101, 109, 109, 123, 125), List(101, 109, 111, 
                                                  //| 111, 135), List(101, 109, 111, 113, 133), List(101, 109, 111, 115, 131), Lis
                                                  //| t(101, 109, 111, 117, 129), List(101, 109, 111, 119, 127), List(101, 109, 11
                                                  //| 1, 121, 125), List(101, 109, 111, 123, 123), List(101, 109, 113, 113, 131), 
                                                  //| List(101, 109, 113, 115, 129), List(101, 109, 113, 117, 127), List(101, 109,
                                                  //|  113, 119, 125), List(101, 109, 113, 121, 123), List(101, 109, 115, 115, 127
                                                  //| ), List(101, 109, 115, 117, 125), List(101, 109, 115, 119, 123), List(101, 1
                                                  //| 09, 115, 121, 121), List(101, 109, 117, 117, 123), List(101, 109, 117, 119, 
                                                  //| 121), List(101, 109, 119, 119, 119), List(101, 111, 111, 111, 133), List(101
                                                  //| , 111, 111, 113, 131), List(101, 111, 111, 115, 129), List(101, 111, 111, 11
                                                  //| 7, 127), List(101, 111, 111, 119, 125), List(101, 111, 111, 121, 123), List(
                                                  //| 101, 111, 113, 113, 129), List(101, 111, 113, 115, 127), List(101, 111, 113,
                                                  //|  117, 125), List(101, 111, 113, 119, 123), List(101, 111, 113, 121, 121), Li
                                                  //| st(101, 111, 115, 115, 125), List(101, 111, 115, 117, 123), List(101, 111, 1
                                                  //| 15, 119, 121), List(101, 111, 117, 117, 121), List(101, 111, 117, 119, 119),
                                                  //|  List(101, 113, 113, 113, 127), List(101, 113, 113, 115, 125), List(101, 113
                                                  //| , 113, 117, 123), List(101, 113, 113, 119, 121), List(101, 113, 115, 115, 12
                                                  //| 3), List(101, 113, 115, 117, 121), List(101, 113, 115, 119, 119), List(101, 
                                                  //| 113, 117, 117, 119), List(101, 115, 115, 115, 121), List(101, 115, 115, 117,
                                                  //|  119), List(101, 115, 117, 117, 117), List(103, 103, 103, 109, 149), List(10
                                                  //| 3, 103, 103, 111, 147), List(103,
                                                  //| Output exceeds cutoff limit.
 all567Sums.size                                  //> res0: Int = 721
 val popsWithVotes = all567Sums.map(x => (x, List(x(0)/2, x(1)/2, x(2)/2, x(3), x(4))))
                                                  //> popsWithVotes  : scala.collection.immutable.IndexedSeq[(List[Int], List[Int]
                                                  //| )] = Vector((List(101, 101, 101, 115, 149),List(50, 50, 50, 115, 149)), (Lis
                                                  //| t(101, 101, 101, 117, 147),List(50, 50, 50, 117, 147)), (List(101, 101, 101,
                                                  //|  119, 145),List(50, 50, 50, 119, 145)), (List(101, 101, 101, 121, 143),List(
                                                  //| 50, 50, 50, 121, 143)), (List(101, 101, 101, 123, 141),List(50, 50, 50, 123,
                                                  //|  141)), (List(101, 101, 101, 125, 139),List(50, 50, 50, 125, 139)), (List(10
                                                  //| 1, 101, 101, 127, 137),List(50, 50, 50, 127, 137)), (List(101, 101, 101, 129
                                                  //| , 135),List(50, 50, 50, 129, 135)), (List(101, 101, 101, 131, 133),List(50, 
                                                  //| 50, 50, 131, 133)), (List(101, 101, 103, 113, 149),List(50, 50, 51, 113, 149
                                                  //| )), (List(101, 101, 103, 115, 147),List(50, 50, 51, 115, 147)), (List(101, 1
                                                  //| 01, 103, 117, 145),List(50, 50, 51, 117, 145)), (List(101, 101, 103, 119, 14
                                                  //| 3),List(50, 50, 51, 119, 143)), (List(101, 101, 103, 121, 141),List(50, 50, 
                                                  //| 51, 121, 141)), (List(101, 101, 103, 123, 139),List(50, 50, 51, 123, 139)), 
                                                  //| (List(101, 101, 103, 125, 137),List(50, 50, 51, 125, 137)), (List(101, 101, 
                                                  //| 103, 127, 135),List(50, 50, 51, 127, 135)), (List(101, 101, 103, 129, 133),L
                                                  //| ist(50, 50, 51, 129, 133)), (List(101, 101, 103, 131, 131),List(50, 50, 51, 
                                                  //| 131, 131)), (List(101, 101, 105, 111, 149),List(50, 50, 52, 111, 149)), (Lis
                                                  //| t(101, 101, 105, 113, 147),List(50, 50, 52, 113, 147)), (List(101, 101, 105,
                                                  //|  115, 145),List(50, 50, 52, 115, 145)), (List(101, 101, 105, 117, 143),List(
                                                  //| 50, 50, 52, 117, 143)), (List(101, 101, 105, 119, 141),List(50, 50, 52, 119,
                                                  //|  141)), (List(101, 101, 105, 121, 139),List(50, 50, 52, 121, 139)), (List(10
                                                  //| 1, 101, 105, 123, 137),List(50, 50, 52, 123, 137)), (List(101, 101, 105, 125
                                                  //| , 135),List(50, 50, 52, 125, 135)), (List(101, 101, 105, 127, 133),List(50, 
                                                  //| 50, 52, 127, 133)), (List(101, 101, 105, 129, 131),List(50, 50, 52, 129, 131
                                                  //| )), (List(101, 101, 107, 109, 149),List(50, 50, 53, 109, 149)), (List(101, 1
                                                  //| 01, 107, 111, 147),List(50, 50, 53, 111, 147)), (List(101, 101, 107, 113, 14
                                                  //| 5),List(50, 50, 53, 113, 145)), (List(101, 101, 107, 115, 143),List(50, 50, 
                                                  //| 53, 115, 143)), (List(101, 101, 107, 117, 141),List(50, 50, 53, 117, 141)), 
                                                  //| (List(101, 101, 107, 119, 139),List(50, 50, 53, 119, 139)), (List(101, 101, 
                                                  //| 107, 121, 137),List(50, 50, 53, 121, 137)), (List(101, 101, 107, 123, 135),L
                                                  //| ist(50, 50, 53, 123, 135)), (List(101, 101, 107, 125, 133),List(50, 50, 53, 
                                                  //| 125, 133)), (List(101, 101, 107, 127, 131),List(50, 50, 53, 127, 131)), (Lis
                                                  //| t(101, 101, 107, 129, 129),List(50, 50, 53, 129, 129)), (List(101, 101, 109,
                                                  //|  109, 147),List(50, 50, 54, 109, 147)), (List(101, 101, 109, 111, 145),List(
                                                  //| 50, 50, 54, 111, 145)), (List(101, 101, 109, 113, 143),List(50, 50, 54, 113,
                                                  //|  143)), (List(101, 101, 109, 115, 141),List(50, 50, 54, 115, 141)), (List(10
                                                  //| 1, 101, 109, 117, 139),List(50, 50, 54, 117, 139)), (List(101, 101, 109, 119
                                                  //| , 137),List(50, 50, 54, 119, 137)), (List(101, 101, 109, 121, 135),List(50, 
                                                  //| 50, 54, 121, 135)), (List(101, 101, 109, 123, 133),List(50, 50, 54, 123, 133
                                                  //| )), (List(101, 101, 109, 125, 131),List(50, 50, 54, 125, 131)), (List(101, 1
                                                  //| 01, 109, 127, 129),List(50, 50, 54, 127, 129)), (List(101, 101, 111, 111, 14
                                                  //| 3),List(50, 50, 55, 111, 143)), (List(101, 101, 111, 113, 141),List(50, 50, 
                                                  //| 55, 113, 141)), (List(101, 101, 111, 115, 139),List(50, 50, 55, 115, 139)), 
                                                  //| (List(101, 101, 111, 117, 137),List(50, 50, 55, 117, 137)), (List(101, 101, 
                                                  //| 111, 119, 135),List(50, 50, 55, 119, 135)), (List(101, 101, 111, 121, 133),L
                                                  //| ist(50, 50, 55, 121, 133)), (List(101, 101, 111, 123, 131),List(50, 50, 55, 
                                                  //| 123, 131)), (List(101, 101, 111, 125, 129),List(50, 50, 55, 125, 129)), (Lis
                                                  //| t(101, 101, 111, 127, 127),List(50, 50, 55, 127, 127)), (List(101, 101, 113,
                                                  //|  113, 139),List(50, 50, 56, 113, 139)), (List(101, 101, 113, 115, 137),List(
                                                  //| 50, 50, 56, 115, 137)), (List(101, 101, 113, 117, 135),List(50, 50, 56, 117,
                                                  //|  135)), (List(101, 101, 113, 119, 133),List(50, 50, 56, 119, 133)), (List(10
                                                  //| 1, 101, 113, 121, 131),List(50, 50, 56, 121, 131)), (List(101, 101, 113, 123
                                                  //| , 129),List(50, 50, 56, 123, 129)), (List(101, 101, 113, 125, 127),List(50, 
                                                  //| 50, 56, 125, 127)), (List(101, 101, 115, 115, 135),List(50, 50, 57, 115, 135
                                                  //| )), (List(101, 101, 115, 117, 133),List(50, 50, 57, 117, 133)), (List(101, 1
                                                  //| 01, 115, 119, 131),List(50, 50, 57, 119, 131)), (List(101, 101, 115, 121, 12
                                                  //| 9),List(50, 50, 57, 121, 129)), (List(101, 101, 115, 123, 127),List(50, 50, 
                                                  //| 57, 123, 127)), (List(101, 101, 115, 125, 125),List(50, 50, 57, 125, 125)), 
                                                  //| (List(101, 101, 117, 117, 131),List(50, 50, 58, 117, 131)), (List(101, 101, 
                                                  //| 117, 119, 129),List(50, 50, 58, 119, 129)), (List(101, 101, 117, 121, 127),L
                                                  //| ist(50, 50, 58, 121, 127)), (List(101, 101, 117, 123, 125),List(50, 50, 58, 
                                                  //| 123, 125)), (List(101, 101, 119, 119, 127),List(50, 50, 59, 119, 127)), (Lis
                                                  //| t(101, 101, 119, 121, 125),List(50, 50, 59, 121, 125)), (List(101, 101, 119,
                                                  //|  123, 123),List(50, 50, 59, 123, 123)), (List(101, 101, 121, 121, 123),List(
                                                  //| 50, 50, 60, 121, 123)), (List(101, 103, 103, 111, 149),List(50, 51, 51, 111,
                                                  //|  149)), (List(101, 103, 103, 113, 147),List(50, 51, 51, 113, 147)), (List(10
                                                  //| 1, 103, 103, 115, 145),List(50, 51, 51, 115, 145)), (List(101, 103, 103, 117
                                                  //| , 143),List(50, 51, 51, 117, 143)), (List(101, 103, 103, 119, 141),List(50, 
                                                  //| 51, 51, 119, 141)), (List(101, 103, 103, 121, 139),List(50, 51, 51, 121, 139
                                                  //| )), (List(101, 103, 103, 123, 137),List(50, 51, 51, 123, 137)), (List(101, 1
                                                  //| 03, 103, 125, 135),List(50, 51, 51, 125, 135)), (List(101, 103, 103, 127, 13
                                                  //| 3),List(50, 51, 51, 127, 133)), (List(101, 103, 103, 129, 131),List(50, 51, 
                                                  //| 51, 129, 131)), (List(101, 103, 105, 109, 149),List(50, 51, 52, 109, 149)), 
                                                  //| (List(101, 103, 105, 111, 147),List(50, 51, 52, 111, 147)), (List(101, 103, 
                                                  //| 105, 113, 145),List(50, 51, 52, 113, 145)), (List(101, 103, 105, 115, 143),L
                                                  //| ist(50, 51, 52, 115, 143)), (List(101, 103, 105, 117, 141),List(50, 51, 52, 
                                                  //| 117, 141)), (List(101, 103, 105, 119, 139),List(50, 51, 52, 119, 139)), (Lis
                                                  //| t(101, 103, 105, 121, 137),List(50, 51, 52, 121, 137)), (List(101, 103, 105,
                                                  //|  123, 135),List(50, 51, 52, 123, 135)), (List(101, 103, 105, 125, 133),List(
                                                  //| 50, 51, 52, 125, 133)), (List(101, 103, 105, 127, 131),List(50, 51, 52, 127,
                                                  //|  131)), (List(101, 103, 105, 129, 129),List(50, 51, 52, 129, 129)), (List(10
                                                  //| 1, 103, 107, 107, 149),List(50, 51, 53, 107, 149)), (List(101, 103, 107, 109
                                                  //| , 147),List(50, 51, 53, 109, 147)), (List(101, 103, 107, 111, 145),List(50, 
                                                  //| 51, 53, 111, 145)), (List(101, 103, 107, 113, 143),List(50, 51, 53, 113, 143
                                                  //| )), (List(101, 103, 107, 115, 141),List(50, 51, 53, 115, 141)), (List(101, 1
                                                  //| 03, 107, 117, 139),List(50, 51, 53, 117, 139)), (List(101, 103, 107, 119, 13
                                                  //| 7),List(50, 51, 53, 119, 137)), (List(101, 103, 107, 121, 135),List(50, 51, 
                                                  //| 53, 121, 135)), (List(101, 103, 107, 123, 133),List(50, 51, 53, 123, 133)), 
                                                  //| (List(101, 103, 107, 125, 131),List(50, 51, 53, 125, 131)), (List(101, 103, 
                                                  //| 107, 127, 129),List(50, 51, 53, 127, 129)), (List(101, 103, 109, 109, 145),L
                                                  //| ist(50, 51, 54, 109, 145)), (List(101, 103, 109, 111, 143),List(50, 51, 54, 
                                                  //| 111, 143)), (List(101, 103, 109, 113, 141),List(50, 51, 54, 113, 141)), (Lis
                                                  //| t(101, 103, 109, 115, 139),List(50, 51, 54, 115, 139)), (List(101, 103, 109,
                                                  //|  117, 137),List(50, 51, 54, 117, 137)), (List(101, 103, 109, 119, 135),List(
                                                  //| 50, 51, 54, 119, 135)), (List(101, 103, 109, 121, 133),List(50, 51, 54, 121,
                                                  //|  133)), (List(101, 103, 109, 123, 131),List(50, 51, 54, 123, 131)), (List(10
                                                  //| 1, 103, 109, 125, 129),List(50, 51, 54, 125, 129)), (List(101, 103, 109, 127
                                                  //| , 127),List(50, 51, 54, 127, 127)), (List(101, 103, 111, 111, 141),List(50, 
                                                  //| 51, 55, 111, 141)), (List(101, 103, 111, 113, 139),List(50, 51, 55, 113, 139
                                                  //| )), (List(101, 103, 111, 115, 137),List(50, 51, 55, 115, 137)), (List(101, 1
                                                  //| 03, 111, 117, 135),List(50, 51, 55, 117, 135)), (List(101, 103, 111, 119, 13
                                                  //| 3),List(50, 51, 55, 119, 133)), (List(101, 103, 111, 121, 131),List(50, 51, 
                                                  //| 55, 121, 131)), (List(101, 103, 111, 123, 129),List(50, 51, 55, 123, 129)), 
                                                  //| (List(101, 103, 111, 125, 127),List(50, 51, 55, 125, 127)), (List(101, 103, 
                                                  //| 113, 113, 137),List(50, 51, 56, 113, 137)), (List(101, 103, 113, 115, 135),L
                                                  //| ist(50, 51, 56, 115, 135)), (List(101, 103, 113, 117, 133),List(50, 51, 56, 
                                                  //| 117, 133)), (List(101, 103, 113, 119, 131),List(50, 51, 56, 119, 131)), (Lis
                                                  //| t(101, 103, 113, 121, 129),List(50, 51, 56, 121, 129)), (List(101, 103, 113,
                                                  //|  123, 127),List(50, 51, 56, 123, 127)), (List(101, 103, 113, 125, 125),List(
                                                  //| 50, 51, 56, 125, 125)), (List(101, 103, 115, 115, 133),List(50, 51, 57, 115,
                                                  //|  133)), (List(101, 103, 115, 117, 131),List(50, 51, 57, 117, 131)), (List(10
                                                  //| 1, 103, 115, 119, 129),List(50, 51, 57, 119, 129)), (List(101, 103, 115, 121
                                                  //| , 127),List(50, 51, 57, 121, 127)), (List(101, 103, 115, 123, 125),List(50, 
                                                  //| 51, 57, 123, 125)), (List(101, 103, 117, 117, 129),List(50, 51, 58, 117, 129
                                                  //| )), (List(101, 103, 117, 119, 127),List(50, 51, 58, 119, 127)), (List(101, 1
                                                  //| 03, 117, 121, 125),List(50, 51, 58, 121, 125)), (List(101, 103, 117, 123, 12
                                                  //| 3),List(50, 51, 58, 123, 123)), (List(101, 103, 119, 119, 125),List(50, 51, 
                                                  //| 59, 119, 125)), (List(101, 103, 119, 121, 123),List(50, 51, 59, 121, 123)), 
                                                  //| (List(101, 103, 121, 121, 121),List(50, 51, 60, 121, 121)), (List(101, 105, 
                                                  //| 105, 107, 149),List(50, 52, 52, 107, 149)), (List(101, 105, 105, 109, 147),L
                                                  //| ist(50, 52, 52, 109, 147)), (List(101, 105, 105, 111, 145),List(50, 52, 52, 
                                                  //| 111, 145)), (List(101, 105, 105, 113, 143),List(50, 52, 52, 113, 143)), (Lis
                                                  //| t(101, 105, 105, 115, 141),List(50, 52, 52, 115, 141)), (List(101, 105, 105,
                                                  //|  117, 139),List(50, 52, 52, 117, 
                                                  //| Output exceeds cutoff limit.
 val solutions = popsWithVotes.filter(x => x._2.sum == 407)
                                                  //> solutions  : scala.collection.immutable.IndexedSeq[(List[Int], List[Int])] =
                                                  //|  Vector((List(101, 101, 115, 115, 135),List(50, 50, 57, 115, 135)), (List(10
                                                  //| 1, 101, 115, 117, 133),List(50, 50, 57, 117, 133)), (List(101, 101, 115, 119
                                                  //| , 131),List(50, 50, 57, 119, 131)), (List(101, 101, 115, 121, 129),List(50, 
                                                  //| 50, 57, 121, 129)), (List(101, 101, 115, 123, 127),List(50, 50, 57, 123, 127
                                                  //| )), (List(101, 101, 115, 125, 125),List(50, 50, 57, 125, 125)), (List(101, 1
                                                  //| 03, 113, 113, 137),List(50, 51, 56, 113, 137)), (List(101, 103, 113, 115, 13
                                                  //| 5),List(50, 51, 56, 115, 135)), (List(101, 103, 113, 117, 133),List(50, 51, 
                                                  //| 56, 117, 133)), (List(101, 103, 113, 119, 131),List(50, 51, 56, 119, 131)), 
                                                  //| (List(101, 103, 113, 121, 129),List(50, 51, 56, 121, 129)), (List(101, 103, 
                                                  //| 113, 123, 127),List(50, 51, 56, 123, 127)), (List(101, 103, 113, 125, 125),L
                                                  //| ist(50, 51, 56, 125, 125)), (List(101, 105, 111, 111, 139),List(50, 52, 55, 
                                                  //| 111, 139)), (List(101, 105, 111, 113, 137),List(50, 52, 55, 113, 137)), (Lis
                                                  //| t(101, 105, 111, 115, 135),List(50, 52, 55, 115, 135)), (List(101, 105, 111,
                                                  //|  117, 133),List(50, 52, 55, 117, 133)), (List(101, 105, 111, 119, 131),List(
                                                  //| 50, 52, 55, 119, 131)), (List(101, 105, 111, 121, 129),List(50, 52, 55, 121,
                                                  //|  129)), (List(101, 105, 111, 123, 127),List(50, 52, 55, 123, 127)), (List(10
                                                  //| 1, 105, 111, 125, 125),List(50, 52, 55, 125, 125)), (List(101, 107, 109, 109
                                                  //| , 141),List(50, 53, 54, 109, 141)), (List(101, 107, 109, 111, 139),List(50, 
                                                  //| 53, 54, 111, 139)), (List(101, 107, 109, 113, 137),List(50, 53, 54, 113, 137
                                                  //| )), (List(101, 107, 109, 115, 135),List(50, 53, 54, 115, 135)), (List(101, 1
                                                  //| 07, 109, 117, 133),List(50, 53, 54, 117, 133)), (List(101, 107, 109, 119, 13
                                                  //| 1),List(50, 53, 54, 119, 131)), (List(101, 107, 109, 121, 129),List(50, 53, 
                                                  //| 54, 121, 129)), (List(101, 107, 109, 123, 127),List(50, 53, 54, 123, 127)), 
                                                  //| (List(101, 107, 109, 125, 125),List(50, 53, 54, 125, 125)), (List(103, 103, 
                                                  //| 111, 111, 139),List(51, 51, 55, 111, 139)), (List(103, 103, 111, 113, 137),L
                                                  //| ist(51, 51, 55, 113, 137)), (List(103, 103, 111, 115, 135),List(51, 51, 55, 
                                                  //| 115, 135)), (List(103, 103, 111, 117, 133),List(51, 51, 55, 117, 133)), (Lis
                                                  //| t(103, 103, 111, 119, 131),List(51, 51, 55, 119, 131)), (List(103, 103, 111,
                                                  //|  121, 129),List(51, 51, 55, 121, 129)), (List(103, 103, 111, 123, 127),List(
                                                  //| 51, 51, 55, 123, 127)), (List(103, 103, 111, 125, 125),List(51, 51, 55, 125,
                                                  //|  125)), (List(103, 105, 109, 109, 141),List(51, 52, 54, 109, 141)), (List(10
                                                  //| 3, 105, 109, 111, 139),List(51, 52, 54, 111, 139)), (List(103, 105, 109, 113
                                                  //| , 137),List(51, 52, 54, 113, 137)), (List(103, 105, 109, 115, 135),List(51, 
                                                  //| 52, 54, 115, 135)), (List(103, 105, 109, 117, 133),List(51, 52, 54, 117, 133
                                                  //| )), (List(103, 105, 109, 119, 131),List(51, 52, 54, 119, 131)), (List(103, 1
                                                  //| 05, 109, 121, 129),List(51, 52, 54, 121, 129)), (List(103, 105, 109, 123, 12
                                                  //| 7),List(51, 52, 54, 123, 127)), (List(103, 105, 109, 125, 125),List(51, 52, 
                                                  //| 54, 125, 125)), (List(103, 107, 107, 107, 143),List(51, 53, 53, 107, 143)), 
                                                  //| (List(103, 107, 107, 109, 141),List(51, 53, 53, 109, 141)), (List(103, 107, 
                                                  //| 107, 111, 139),List(51, 53, 53, 111, 139)), (List(103, 107, 107, 113, 137),L
                                                  //| ist(51, 53, 53, 113, 137)), (List(103, 107, 107, 115, 135),List(51, 53, 53, 
                                                  //| 115, 135)), (List(103, 107, 107, 117, 133),List(51, 53, 53, 117, 133)), (Lis
                                                  //| t(103, 107, 107, 119, 131),List(51, 53, 53, 119, 131)), (List(103, 107, 107,
                                                  //|  121, 129),List(51, 53, 53, 121, 129)), (List(103, 107, 107, 123, 127),List(
                                                  //| 51, 53, 53, 123, 127)), (List(103, 107, 107, 125, 125),List(51, 53, 53, 125,
                                                  //|  125)), (List(105, 105, 107, 107, 143),List(52, 52, 53, 107, 143)), (List(10
                                                  //| 5, 105, 107, 109, 141),List(52, 52, 53, 109, 141)), (List(105, 105, 107, 111
                                                  //| , 139),List(52, 52, 53, 111, 139)), (List(105, 105, 107, 113, 137),List(52, 
                                                  //| 52, 53, 113, 137)), (List(105, 105, 107, 115, 135),List(52, 52, 53, 115, 135
                                                  //| )), (List(105, 105, 107, 117, 133),List(52, 52, 53, 117, 133)), (List(105, 1
                                                  //| 05, 107, 119, 131),List(52, 52, 53, 119, 131)), (List(105, 105, 107, 121, 12
                                                  //| 9),List(52, 52, 53, 121, 129)), (List(105, 105, 107, 123, 127),List(52, 52, 
                                                  //| 53, 123, 127)), (List(105, 105, 107, 125, 125),List(52, 52, 53, 125, 125)))
 solutions.size                                   //> res1: Int = 67

 solutions.map(x => (x._1.sum, x._2.sum))         //> res2: scala.collection.immutable.IndexedSeq[(Int, Int)] = Vector((567,407), 
                                                  //| (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407),
                                                  //|  (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407)
                                                  //| , (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407
                                                  //| ), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,40
                                                  //| 7), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,4
                                                  //| 07), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,
                                                  //| 407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567
                                                  //| ,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (56
                                                  //| 7,407), (567,407), (567,407), (567,407), (567,407), (567,407), (567,407), (5
                                                  //| 67,407), (567,407), (567,407), (567,407))
                                                  

case class Item(name: String, weight: Int, value: Int)
case class State(name: String, population: Int, electors: Int)

//===== dynamic programming ==========================================================
  val ks01d: List[State] => Unit = listostates => {
    val W = 538/2
    val N = listostates.size
    println(" W = " + W + " N = " + N)
    val m = Array.ofDim[Int](N+1,W+1)
    val plm = (List((for {w <- 0 to W} yield Set[State]()).toArray)++(
                for {
                  n <- 0 to N-1
                  colN = (for {w <- 0 to W} yield Set[State](listostates(n))).toArray
                } yield colN)).toArray
 
    1 to N foreach {n =>
      0 to W foreach {w =>
        def in = listostates(n-1)
        def wn = listostates(n-1).electors
        def vn = listostates(n-1).population
        if (w<wn) {
          m(n)(w) = m(n-1)(w)
          plm(n)(w) = plm(n-1)(w)
        }
        else {
          if (m(n-1)(w)>=m(n-1)(w-wn)+vn) {
            m(n)(w) = m(n-1)(w)
            plm(n)(w) = plm(n-1)(w)
          }
          else {
            m(n)(w) = m(n-1)(w-wn)+vn
	          plm(n)(w) = plm(n-1)(w-wn)+in
	       }
      	}
      }
    }
    
    println(plm(N)(W).size)
    println(plm(N)(W).map{item=>item.electors}.size)
    println(plm(N)(W).map{item=>item.electors}.sum)
    println(plm(N)(W).toVector.map{item=>item.electors}.size)
    println(plm(N)(W).toVector.map{item=>item.electors}.sum)
    
    println{val h = "packing list of items (dynamic programming):"; h+"\n"+"="*h.size}
    plm(N)(W).foreach{p=>print("  "+p.name+": weight="+p.electors+" value="+p.population*1000+"\n")}
    println("\n"+"  resulting items: "+plm(N)(W).size+" of "+listostates.size)
    println("  total weight: "+(0/:plm(N)(W).toVector.map{item=>item.electors})(_+_)+", total value: "+m(N)(W)*1000)
    println("  total weight: "+(0/:plm(N)(W).toVector.map{item=>item.electors})(_+_)+", total value: "+(0/:plm(N)(W).toVector.map{item=>item.population*1000})(_+_))
    
    val included = plm(N)(W).toList
    val excluded = listostates.filterNot(plm(N)(W))
    println("Excluded")
    excluded.foreach{p=>print("  "+p.name+": electors="+p.electors+" half population="+p.population*1000/2+"\n")}
    println("  total weight of excluded: "+(0/:excluded.toVector.map{item=>item.electors})(_+_)+
    ", total value (half of each population before summing): "+(0/:excluded.toVector.map{item=>item.population*1000/2})(_+_))
    println("\n"+"  excluded items count: "+excluded.size+" of "+listostates.size)
    
    
    
    println("Present your answer in the following format:\n[p1, p2, p3, p4, p5]\n[v1, v2, v3, v4, v5]\n")
    print("[")
    print(included.map{p=>p.population*1000}.mkString(","))
    print(",")
    print(excluded.map{p=>p.population*1000}.mkString(","))
    println("]")
    print("[")
    print(included.map{p=>p.population*1000}.mkString(","))
    print(",")
    print(excluded.map{p=>p.population*1000/2}.mkString(","))
    println("]")
    
  }                                               //> ks01d  : List[ponder.State] => Unit = ponder$$$Lambda$26/519821334@6a2bcfcb
                                                  //| 
 
  val items = List(
     Item("map", 9, 150)
    ,Item("compass", 13, 35)
    ,Item("water", 153, 200)
    ,Item("sandwich", 50, 160)
    ,Item("glucose", 15, 60)
    ,Item("tin", 68, 45)
    ,Item("banana", 27, 60)
    ,Item("apple", 39, 40)
    ,Item("cheese", 23, 30)
    ,Item("beer", 52, 10)
    ,Item("suntan cream", 11, 70)
    ,Item("camera", 32, 30)
    ,Item("t-shirt", 24, 15)
    ,Item("trousers", 48, 10)
    ,Item("umbrella", 73, 40)
    ,Item("waterproof trousers", 42, 70)
    ,Item("waterproof overclothes", 43, 75)
    ,Item("note-case", 22, 80)
    ,Item("sunglasses", 7, 20)
    ,Item("towel", 18, 12)
    ,Item("socks", 4, 50)
    ,Item("book", 30, 10)
  )                                               //> items  : List[ponder.Item] = List(Item(map,9,150), Item(compass,13,35), Ite
                                                  //| m(water,153,200), Item(sandwich,50,160), Item(glucose,15,60), Item(tin,68,4
                                                  //| 5), Item(banana,27,60), Item(apple,39,40), Item(cheese,23,30), Item(beer,52
                                                  //| ,10), Item(suntan cream,11,70), Item(camera,32,30), Item(t-shirt,24,15), It
                                                  //| em(trousers,48,10), Item(umbrella,73,40), Item(waterproof trousers,42,70), 
                                                  //| Item(waterproof overclothes,43,75), Item(note-case,22,80), Item(sunglasses,
                                                  //| 7,20), Item(towel,18,12), Item(socks,4,50), Item(book,30,10))
//  https://en.wikipedia.org/wiki/United_States_Electoral_College#Chronological_table
//  https://www.kff.org/other/state-indicator/number-of-voters-and-voter-registration-in-thousands-as-a-share-of-the-voter-population/?currentTimeframe=0&sortModel=%7B%22colId%22:%22Location%22,%22sort%22:%22asc%22%7D
  val states = List(
   State("Alabama",		2490,	9),
   State("Alaska",	337,	3),
   State("Arizona",	3262,	11),
  State("Arkansas",	1262,	6),
State("California",	15690,	55),
State("Colorado",	2645,	9),
State("Connecticut",	1726,	7),
State("D.,C.",	397,	3),
State("Delaware",	472,	3),
State("Florida",	9435,	29),
State("Georgia",	4840,	16),
State("Hawaii",	523,	4),
State("Idaho",	743,	4),
State("Illinois",	6068,	20),
State("Indiana",	3131,	11),
State("Iowa",	1658,	6),
State("Kansas",	1449,	6),
State("Kentucky",	2389,	8),
State("Louisiana",	2263,	8),
State("Maine",	828,	4),
State("Maryland",	3095,	10),
State("Massachusetts",	3345,	11),
State("Michigan",	5453,	16),
State("Minnesota",	3000,	10),
State("Mississippi",	1599,	6),
State("Missouri",	3299,	10),
State("Montana",	579,	3),
State("Nebraska",	883,	5),
State("Nevada",	1277,	6),
State("NewHampshire",	726,	4),
State("NewJersey",	4297,	14),
State("NewMexico",	916,	5),
State("NewYork",	8553,	29),
State("NorthCarolina",	5160,	15),
State("NorthDakota",	397,	3),
State("Ohio",	6062,	18),
State("Oklahoma",	1777,	7),
State("Oregon",	2274,	7),
State("Pennsylvania",	6469,	20),
State("RhodeIsland",	532,	4),
State("SouthCarolina",	2430,	9),
State("SouthDakota",	429,	3),
State("Tennessee",	3183,	11),
State("Texas",	11634,	38),
State("Utah",	1443,	6),
State("Vermont",	343,	3),
State("Virginia",	4159,	13),
State("Washington",	3852,	12),
State("WestVirginia",	892,	5),
State("Wisconsin",	3129,	10),
State("Wyoming",		268,	3))       //> states  : List[ponder.State] = List(State(Alabama,2490,9), State(Alaska,337
                                                  //| ,3), State(Arizona,3262,11), State(Arkansas,1262,6), State(California,15690
                                                  //| ,55), State(Colorado,2645,9), State(Connecticut,1726,7), State(D.,C.,397,3)
                                                  //| , State(Delaware,472,3), State(Florida,9435,29), State(Georgia,4840,16), St
                                                  //| ate(Hawaii,523,4), State(Idaho,743,4), State(Illinois,6068,20), State(India
                                                  //| na,3131,11), State(Iowa,1658,6), State(Kansas,1449,6), State(Kentucky,2389,
                                                  //| 8), State(Louisiana,2263,8), State(Maine,828,4), State(Maryland,3095,10), S
                                                  //| tate(Massachusetts,3345,11), State(Michigan,5453,16), State(Minnesota,3000,
                                                  //| 10), State(Mississippi,1599,6), State(Missouri,3299,10), State(Montana,579,
                                                  //| 3), State(Nebraska,883,5), State(Nevada,1277,6), State(NewHampshire,726,4),
                                                  //|  State(NewJersey,4297,14), State(NewMexico,916,5), State(NewYork,8553,29), 
                                                  //| State(NorthCarolina,5160,15), State(NorthDakota,397,3), State(Ohio,6062,18)
                                                  //| , State(Oklahoma,1777,7), State(Oregon,2274,7), State(Pennsylvania,6469,20)
                                                  //| , State(RhodeIsland,532,4), State(SouthCarolina,2430,9), State(SouthDakota,
                                                  //| 429,3), State(Tennessee,3183,11), State(Texas,11634,38), State(Utah,1443,6)
                                                  //| , State(Vermont,343,3), State(Virginia,4159,13), State(Washington,3852,12),
                                                  //|  State(WestVirginia,892,5), State(Wisconsin,3129,10), State(Wyoming,268,3))
                                                  //| 
 

  val elapsed: (=> Unit) => Long = f => {val s = System.currentTimeMillis; f; (System.currentTimeMillis - s)/1000}
                                                  //> elapsed  : (=> Unit) => Long = ponder$$$Lambda$27/1076835071@573f2bb1
 
  List(ks01d).foreach{f=>
//    val t = elapsed{f(items)}
    val t = elapsed{f(states)}
    println("  elapsed time: "+t+" sec"+"\n")
  }                                               //>  W = 269 N = 51
                                                  //| 17
                                                  //| 12
                                                  //| 203
                                                  //| 17
                                                  //| 269
                                                  //| packing list of items (dynamic programming):
                                                  //| ============================================
                                                  //|   Texas: weight=38 value=11634000
                                                  //|   Illinois: weight=20 value=6068000
                                                  //|   Ohio: weight=18 value=6062000
                                                  //|   Washington: weight=12 value=3852000
                                                  //|   Florida: weight=29 value=9435000
                                                  //|   Michigan: weight=16 value=5453000
                                                  //|   Georgia: weight=16 value=4840000
                                                  //|   NorthCarolina: weight=15 value=5160000
                                                  //|   Maryland: weight=10 value=3095000
                                                  //|   Massachusetts: weight=11 value=3345000
                                                  //|   Oregon: weight=7 value=2274000
                                                  //|   Missouri: weight=10 value=3299000
                                                  //|   NewJersey: weight=14 value=4297000
                                                  //|   Pennsylvania: weight=20 value=6469000
                                                  //|   Wisconsin: weight=10 value=3129000
                                                  //|   Virginia: weight=13 value=4159000
                                                  //|   Minnesota: weight=10 value=3000000
                                                  //| 
                                                  //|   resulting items: 17 of 51
                                                  //|   total weight: 269, total value: 85571000
                                                  //|   total weight: 269, total value: 85571000
                                                  //| Excluded
                                                  //|   Alabama: electors=9 half population=1245000
                                                  //|   Alaska: electors=3 half population=168500
                                                  //|   Arizona: electors=11 half population=1631000
                                                  //|   Arkansas: electors=6 half population=631000
                                                  //|   California: electors=55 half population=7845000
                                                  //|   Colorado: electors=9 half population=1322500
                                                  //|   Connecticut: electors=7 half population=863000
                                                  //|   D.,C.: electors=3 half population=198500
                                                  //|   Delaware: electors=3 half population=236000
                                                  //|   Hawaii: electors=4 half population=261500
                                                  //|   Idaho: electors=4 half population=371500
                                                  //|   Indiana: electors=11 half population=1565500
                                                  //|   Iowa: electors=6 half population=829000
                                                  //|   Kansas: electors=6 half population=724500
                                                  //|   Kentucky: electors=8 half population=1194500
                                                  //|   Louisiana: electors=8 half population=1131500
                                                  //|   Maine: electors=4 half population=414000
                                                  //|   Mississippi: electors=6 half population=799500
                                                  //|   Montana: electors=3 half population=289500
                                                  //|   Nebraska: electors=5 half population=441500
                                                  //|   Nevada: electors=6 half population=638500
                                                  //|   NewHampshire: electors=4 half population=363000
                                                  //|   NewMexico: electors=5 half population=458000
                                                  //|   NewYork: electors=29 half population=4276500
                                                  //|   NorthDakota: electors=3 half population=198500
                                                  //|   Oklahoma: electors=7 half population=888500
                                                  //|   RhodeIsland: electors=4 half population=266000
                                                  //|   SouthCarolina: electors=9 half population=1215000
                                                  //|   SouthDakota: electors=3 half population=214500
                                                  //|   Tennessee: electors=11 half population=1591500
                                                  //|   Utah: electors=6 half population=721500
                                                  //|   Vermont: electors=3 half population=171500
                                                  //|   WestVirginia: electors=5 half population=446000
                                                  //|   Wyoming: electors=3 half population=134000
                                                  //|   total weight of excluded: 269, total value (half of each population befor
                                                  //| e summing): 33746000
                                                  //| 
                                                  //|   excluded items count: 34 of 51
                                                  //| Present your answer in the following format:
                                                  //| [p1, p2, p3, p4, p5]
                                                  //| [v1, v2, v3, v4, v5]
                                                  //| 
                                                  //| [11634000,6068000,6062000,3852000,9435000,5453000,4840000,5160000,3095000,3
                                                  //| 345000,2274000,3299000,4297000,6469000,3129000,4159000,3000000,2490000,3370
                                                  //| 00,3262000,1262000,15690000,2645000,1726000,397000,472000,523000,743000,313
                                                  //| 1000,1658000,1449000,2389000,2263000,828000,1599000,579000,883000,1277000,7
                                                  //| 26000,916000,8553000,397000,1777000,532000,2430000,429000,3183000,1443000,3
                                                  //| 43000,892000,268000]
                                                  //| [11634000,6068000,6062000,3852000,9435000,5453000,4840000,5160000,3095000,3
                                                  //| 345000,2274000,3299000,4297000,6469000,3129000,4159000,3000000,1245000,1685
                                                  //| 00,1631000,631000,7845000,1322500,863000,198500,236000,261500,371500,156550
                                                  //| 0,829000,724500,1194500,1131500,414000,799500,289500,441500,638500,363000,4
                                                  //| 58000,4276500,198500,888500,266000,1215000,214500,1591500,721500,171500,446
                                                  //| 000,134000]
                                                  //|   elapsed time: 0 sec
                                                  //| 
 states.size                                      //> res3: Int = 51
 states.map(_.name)                               //> res4: List[String] = List(Alabama, Alaska, Arizona, Arkansas, California, C
                                                  //| olorado, Connecticut, D.,C., Delaware, Florida, Georgia, Hawaii, Idaho, Ill
                                                  //| inois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massach
                                                  //| usetts, Michigan, Minnesota, Mississippi, Missouri, Montana, Nebraska, Neva
                                                  //| da, NewHampshire, NewJersey, NewMexico, NewYork, NorthCarolina, NorthDakota
                                                  //| , Ohio, Oklahoma, Oregon, Pennsylvania, RhodeIsland, SouthCarolina, SouthDa
                                                  //| kota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, WestVirginia, 
                                                  //| Wisconsin, Wyoming)
 states.map(_.population)                         //> res5: List[Int] = List(2490, 337, 3262, 1262, 15690, 2645, 1726, 397, 472, 
                                                  //| 9435, 4840, 523, 743, 6068, 3131, 1658, 1449, 2389, 2263, 828, 3095, 3345, 
                                                  //| 5453, 3000, 1599, 3299, 579, 883, 1277, 726, 4297, 916, 8553, 5160, 397, 60
                                                  //| 62, 1777, 2274, 6469, 532, 2430, 429, 3183, 11634, 1443, 343, 4159, 3852, 8
                                                  //| 92, 3129, 268)
 states.map(_.population).sum                     //> res6: Int = 153063
 states.map(_.electors)                           //> res7: List[Int] = List(9, 3, 11, 6, 55, 9, 7, 3, 3, 29, 16, 4, 4, 20, 11, 6
                                                  //| , 6, 8, 8, 4, 10, 11, 16, 10, 6, 10, 3, 5, 6, 4, 14, 5, 29, 15, 3, 18, 7, 7
                                                  //| , 20, 4, 9, 3, 11, 38, 6, 3, 13, 12, 5, 10, 3)
 states.map(_.electors).sum                       //> res8: Int = 538
 def knapsack(maxWeight: Int, value: Vector[Int], weight: Vector[Int]): Int = {
  val n = value.length
  val firstRow = Vector.fill(maxWeight + 1)( 0 )
  val lastRow = (1 to n).foldLeft(firstRow) { (upperRow, i) =>
    0 +: (1 to maxWeight).map { j =>
        if( j - weight(i-1) >= 0 ) {
            Math.max(
                upperRow(j) ,
                upperRow(j - weight(i-1)) + value(i-1)
            )
        } else {
            upperRow(j)
        }
    }.toVector
  }
  lastRow.last
 }                                                //> knapsack: (maxWeight: Int, value: Vector[Int], weight: Vector[Int])Int
  538/2                                           //> res9: Int(269) = 269
  269                                             //> res10: Int(269) = 269
  knapsack(538/2, states.map(x => x.population).toVector, states.map(_.electors).toVector)
                                                  //> res11: Int = 85571
  85571 +33736                                    //> res12: Int(119307) = 119307
  (85571 +33736).toDouble/153063                  //> res13: Double = 0.7794633582250446
  (85571+67492/2).toDouble/153063                 //> res14: Double = 0.77952869080052
                                                  
}