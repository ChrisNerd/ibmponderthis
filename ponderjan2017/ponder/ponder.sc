import java.math.BigInteger
import java.math.MathContext
 
object ponder {
def primeFactorsContainOnlyTwoAndFive(x: Int): Boolean = {
// divide it by 2 until you can't, then divide it by 5 until you can't. Is the result 1?
var xv = x
  while(xv % 2 == 0){
   xv=xv/2
  }
  while(xv % 5 == 0){
   xv=xv/5
  }
xv == 1
}                                                 //> primeFactorsContainOnlyTwoAndFive: (x: Int)Boolean
def factorsOtherThanTwoAndFive(x: Int): Int = {
// divide it by 2 until you can't, then divide it by 5 until you can't. Is the result 1?
var xv = x
var b2=0
var b5=0
  while(xv % 2 == 0){
   xv=xv/2
   b2=b2+1
  }
  while(xv % 5 == 0){
   xv=xv/5
   b5=b5+1
  }
xv
}                                                 //> factorsOtherThanTwoAndFive: (x: Int)Int
def isPrime(x:Int): Boolean = x match {
case 1 => true
case _ => (2 to math.sqrt(x.toDouble).toInt).forall(y=> x%y != 0)

}                                                 //> isPrime: (x: Int)Boolean
isPrime(7)                                        //> res0: Boolean = true
isPrime(51)                                       //> res1: Boolean = false
isPrime(53)                                       //> res2: Boolean = true
factorsOtherThanTwoAndFive(320)                   //> res3: Int = 1

primeFactorsContainOnlyTwoAndFive(9)              //> res4: Boolean = false
primeFactorsContainOnlyTwoAndFive(15)             //> res5: Boolean = false
primeFactorsContainOnlyTwoAndFive(30)             //> res6: Boolean = false
primeFactorsContainOnlyTwoAndFive(31)             //> res7: Boolean = false
primeFactorsContainOnlyTwoAndFive(16)             //> res8: Boolean = true
primeFactorsContainOnlyTwoAndFive(80)             //> res9: Boolean = true
 
 val nbonus5 = (for {
  b5 <- 0 to scala.math.pow(2,6).toInt
  }
 yield{
  (BigInt(5).modPow(b5, BigInt(10).pow(8)),b5)
  }).filter {x=>x._1.toString().reverse.dropWhile(_ == '0').reverse.takeRight(8)/*.filter { x => x != '9' && x != '0'}*/.distinct.length() == 8 }
                                                  //> nbonus5  : scala.collection.immutable.IndexedSeq[(scala.math.BigInt, Int)] 
                                                  //| = Vector((37890625,48))
  
  
 val nbonus2 = (for {
  b <- 0 to 4*scala.math.pow(5,7).toInt
  }
 yield{
  (BigInt(2).modPow(b, BigInt(10).pow(8)),b)
  }).filter {x=>x._1.toString().reverse.dropWhile(_ == '0').reverse.takeRight(8).filter { x => x != '9' && x != '0'}.distinct.length() == 8 }
                                                  //> nbonus2  : scala.collection.immutable.IndexedSeq[(scala.math.BigInt, Int)] 
                                                  //| = Vector((78345216,1324), (15284736,1836), (75186432,3125), (28417536,11716
                                                  //| ), (76451328,11747), (32765184,16434), (42317568,23675), (38571264,25486), 
                                                  //| (45812736,28136), (72481536,28616), (72154368,29735), (37421568,32975), (37
                                                  //| 165824,33130), (52637184,33734), (83146752,35901), (21754368,37235), (45312
                                                  //| 768,38515), (48736512,39309), (58643712,44669), (85372416,44844), (56431872
                                                  //| ,49857), (72163584,53494), (28371456,53628), (75216384,55014), (42375168,55
                                                  //| 095), (15637248,59451), (67152384,62414), (73852416,62844), (42817536,64216
                                                  //| ), (32184576,66620), (81524736,68336), (34186752,72901), (71845632,73485), 
                                                  //| (28475136,75176), (34576128,75207), (73184256,75908), (53842176,81680), (65
                                                  //| 173248,83651), (27841536,84616), (16547328,85947), (48517632,86085), (73241
                                                  //| 856,86668), (12485376,93100), (24581376,93200), (67325184,95434), (78315264
                                                  //| ,98086), (76253184,98134), (84563712,103169), (23187456,107728), (57618432,
                                                  //| 108725), (78241536,112116), (76845312,113749), (72354816,114684), (41273856
                                                  //| ,117368), (41285376,123100), (54821376,124700), (71283456,127328), (3154867
                                                  //| 2,130497), (21763584,130994), (43527168,130995), (81432576,132920), (845176
                                                  //| 32,136085), (42587136,137876), (37456128,138707), (17653248,139651), (68435
                                                  //| 712,141769), (73456128,151207), (82354176,151380), (86314752,156301), (8147
                                                  //| 6352,156781), (46153728,157227), (13572864,158126), (18346752,158401), (752
                                                  //| 34816,160184), (18245376,161600), (62371584,163194), (34857216,165524), (65
                                                  //| 712384,166414), (53178624,168450), (51738624,169950), (63145728,170627), (4
                                                  //| 5683712,171669), (87531264,171986), (43128576,173020), (48563712,178169), (
                                                  //| 46351872,178357), (61357824,180430), (24173568,183875), (31765248,188551), 
                                                  //| (42875136,190176), (31578624,190950), (63157248,190951), (85234176,191880),
                                                  //|  (17365248,196051), (51637248,196951), (61385472,201137), (47536128,204707)
                                                  //| , (13865472,205137), (14328576,205520), (54736128,207207), (15738624,207450
                                                  //| ), (42137856,208768), (75416832,209945), (58731264,214486), (18634752,21480
                                                  //| 1), (65843712,217169), (52176384,219014), (71684352,219181), (25371648,2211
                                                  //| 31), (16374528,221887), (18452736,222136), (37184256,225908), (74368512,225
                                                  //| 909), (31267584,227094), (13526784,229874), (41386752,232901), (37241856,23
                                                  //| 6668), (61834752,237301), (47213568,239375), (76384512,241709), (27514368,2
                                                  //| 41735), (81764352,243181), (27341568,246975), (86153472,247537), (48312576,
                                                  //| 248420), (32571648,248631), (42713856,248868), (23417856,249268), (46835712
                                                  //| ,249269), (47651328,251747), (56173824,253330), (56178432,256725), (1327564
                                                  //| 8,262431), (56143872,262457), (52731648,263131), (26371584,263194), (527431
                                                  //| 68,263195), (57613824,264330), (58427136,264376), (16752384,264914), (52148
                                                  //| 736,268736), (34258176,268780), (58473216,273624), (37852416,275344), (6413
                                                  //| 8752,276001), (84736512,276809), (45176832,280445), (17835264,281086), (473
                                                  //| 21856,282168), (84312576,285920), (61475328,286547), (51284736,289336), (53
                                                  //| 641728,289827), (83561472,290937), (43785216,292824), (35126784,294874), (7
                                                  //| 3421568,295475), (31465728,297127), (17586432,298125), (35172864,298126), (
                                                  //| 43561728,298827), (87123456,298828), (12473856,299868), (72315648,300431), 
                                                  //| (73165824,308130), (31827456,309228), (53148672,310497))
  //.filter(x=> primeFactorsContainOnlyTwoAndFive(x._2))
 //.filter(x=> isPrime(factorsOtherThanTwoAndFive(x._2))) map (x=> (x._1, x._2, factorsOtherThanTwoAndFive(x._2)))
 
 //nbonus2.sortBy(x=>x._3)
 
 nbonus2.size                                     //> res10: Int = 167
 val vb2hash = (nbonus2 map (_._2)).toSet         //> vb2hash  : scala.collection.immutable.Set[Int] = Set(309228, 246975, 205520
                                                  //| , 268736, 275344, 95434, 16434, 157227, 295475, 298828, 151207, 130994, 247
                                                  //| 537, 264376, 64216, 62414, 44844, 219181, 249268, 23675, 38515, 183875, 536
                                                  //| 28, 165524, 168450, 161600, 73485, 3125, 59451, 208768, 225909, 300431, 117
                                                  //| 16, 75176, 93100, 262457, 205137, 127328, 66620, 248420, 282168, 207450, 26
                                                  //| 8780, 227094, 229874, 160184, 113749, 55095, 263195, 107728, 178169, 72901,
                                                  //|  1836, 251747, 170627, 112116, 225908, 289336, 86085, 221131, 132920, 75207
                                                  //| , 299868, 166414, 273624, 103169, 276809, 1324, 139651, 81680, 188551, 2492
                                                  //| 69, 241709, 236668, 32975, 286547, 11747, 294874, 49857, 196051, 37235, 308
                                                  //| 130, 292824, 190176, 108725, 310497, 190951, 158401, 290937, 85947, 28616, 
                                                  //| 207207, 124700, 136085, 248868, 239375, 248631, 156301, 55014, 138707, 2190
                                                  //| 14, 151380, 53494, 25486, 256725, 297127, 214486, 171669, 33734, 263194, 17
                                                  //| 3020, 264330, 243181, 141769, 263131, 123100, 204707, 180430, 237301, 84616
                                                  //| , 214801, 298126, 98086, 86668, 281086, 169950, 217169, 221887, 114684, 297
                                                  //| 35, 163194, 98134, 241735, 62844, 298827, 156781, 130995, 191880, 289827, 9
                                                  //| 3200, 201137, 264914, 190950, 222136, 130497, 196951, 28136, 253330, 276001
                                                  //| , 83651, 262431, 35901, 178357, 158126, 232901, 39309, 285920, 75908, 17198
                                                  //| 6, 44669, 137876, 117368, 209945, 33130, 68336, 280445, 298125)
 
 val b2 =2                                        //> b2  : Int = 2
 val b5 = 6                                       //> b5  : Int = 6
   val pBig = BigInt(2).modPow(b2, BigInt(5).pow(7)*4) * BigInt(5).modPow(b5, BigInt(5).pow(7) *4)
                                                  //> pBig  : scala.math.BigInt = 62500
  ( pBig * (b5-b2) % (BigInt(5).pow(7) *4 )).toInt//> res11: Int = 250000
  ( pBig  % (BigInt(5).pow(7) *4 )).toInt         //> res12: Int = 62500
  
 
 (Stream.from(0) map (b5 =>
  for
  {
   b2 <- (0 to 10)
 //  b5 <- (b2+1 to b2+4)
  }
  yield
  {
//  (10^{b_{5}}+2^{b_{5}-b_{2}})^{p}
  val pBig = BigInt(2).pow(b2) * BigInt(5).pow(b5)
  if (b5>b2)
  (b2,b5, (BigInt(10).pow(b5) + BigInt(2).pow(b5-b2)).modPow(pBig,BigInt(10).pow(8)))
  else
  (b2,b5, (BigInt(10).pow(b2) + BigInt(5).pow(b2-b5)).modPow(pBig,BigInt(10).pow(8)))
  }
  )).take(100).toList.flatten
  //.filter {x=>x._3 != BigInt(87109376) }
  //.filter {x=>x._3.toString().reverse.dropWhile(_ == '0').reverse.takeRight(8).filter { x => x != '9' && x != '0'}.distinct.length() == 8 }
 .filter {x=>x._3.toString().reverse.dropWhile(_ == '0').reverse.takeRight(8).distinct.length() == 8 }
                                                  //> res13: List[(Int, Int, scala.math.BigInt)] = List((4,1,37890625), (0,5,5918
                                                  //| 6432), (0,9,79186432), (0,13,79186432), (0,17,79186432), (0,21,79186432), (
                                                  //| 0,25,79186432), (0,29,79186432), (0,33,79186432), (0,37,79186432), (0,41,79
                                                  //| 186432), (0,45,79186432), (0,49,79186432), (0,53,79186432), (0,57,79186432)
                                                  //| , (0,61,79186432), (0,65,79186432), (0,69,79186432), (0,73,79186432), (0,77
                                                  //| ,79186432), (0,81,79186432), (0,85,79186432), (0,89,79186432), (0,93,791864
                                                  //| 32), (0,97,79186432))
 
  val pBig2 = BigInt(2).pow(0) * BigInt(5).pow(5) //> pBig2  : scala.math.BigInt = 3125
 (BigInt(10).pow(5) + BigInt(2).pow(5)).modPow(pBig2+1,BigInt(10).pow(8))
                                                  //> res14: scala.math.BigInt = 37165824
 (BigInt(100032)).modPow(3126,BigInt(10).pow(8))  //> res15: scala.math.BigInt = 37165824
// Checks out in WA
// For y
/*
 (Stream.from(0) map (b5 =>
  for
  {
   b2 <- (0 to 10)
 //  b5 <- (b2+1 to b2+4)
  }
  yield
  {
//  (10^{b_{5}}+2^{b_{5}-b_{2}})^{p}
  val pBig = BigInt(2).pow(b2) * BigInt(5).pow(b5)
  if (b5>b2)
  (b2,b5, (BigInt(10).pow(b5) + BigInt(2).pow(b5-b2)).modPow(pBig+1,BigInt(10).pow(8)), (BigInt(10).pow(b5) + BigInt(2).pow(b5-b2)).modPow(pBig+1,BigInt(10).pow(10)))
  else
  (b2,b5, (BigInt(10).pow(b2) + BigInt(5).pow(b2-b5)).modPow(pBig+1,BigInt(10).pow(8)), (BigInt(10).pow(b2) + BigInt(5).pow(b2-b5)).modPow(pBig+1,BigInt(10).pow(10)))
  }
  ))/*.take(1000).toList*/.flatten
  //.filter {x=>x._3 != BigInt(87109376) }
  .filter {x=>x._3.toString().reverse.dropWhile(_ == '0').reverse.takeRight(8).filter { x => x != '9' && x != '0'}.distinct.length() == 8 }
  .foreach(println)                          */
         
 //.filter {x=>x._3.toString().reverse.dropWhile(_ == '0').reverse.takeRight(8).distinct.length() == 8 }
 
/*
 (Stream.from(1) map (b5 =>
 for
 {
  b2 <- (0 until b5)
  if (vb2hash contains(
  {
  ( (b5-b2) % (BigInt(5).pow(7) *4 )).toInt
  }
  ))
  }
  yield
  {
  (b2,b5)
  }
 )).filter(x=>x != Vector()).foreach(println)*/

 /*
 val sbonus2 = for
 {
  b5 <- (20000 to 2000000)
  b2 <- (0 until b5)
  if (vb2hash contains(
  {
  val pBig = BigInt(2).modPow(b2, BigInt(5).pow(7)*4) * BigInt(5).modPow(b5, BigInt(5).pow(7) *4)
  ( pBig * (b5-b2) % (BigInt(5).pow(7) *4 )).toInt
  }
  ))
  }
  yield
  {
  (b2,b5)
  }
 



   val sbonus = (for
{
  b2 <- (0 to 20)
  b5 <- (0 to 20)
  }
yield
{
 val pInt = (scala.math.pow(2,b2) * scala.math.pow(5,b5)).toInt
 val pBig = BigInt(2).pow(b2) * BigInt(5).pow(b5)  //BigDecimal(pInt,new java.math.MathContext(1000))
 
 val k0 =
 if ( b2 > b5)
  BigInt(2).modPow(pBig*(b2-b5),BigInt(10).pow(8))
  else
  BigInt(5).modPow(pBig*(b5-b2),BigInt(10).pow(8))
 val k1 = (k0*pBig.modPow(2, BigInt(10).pow(8))).mod(BigInt(10).pow(8))
 val k2 = (k0*(pBig.modPow(4, BigInt(10).pow(8))- pBig.modPow(3, BigInt(10).pow(8)))/2 ).mod(BigInt(10).pow(8))//(p^4-p^3)/2 * k0
 val k = k0+k1+k2
 val xstring = k.toString()
 val lastchars = xstring takeRight(8) filter { x => x != '9' && x != '0'}
 (b2,b5,lastchars.distinct.length(),pBig,k0,k1,k2,k,xstring)}
 ).filter(_._3==8)
   */
// verified with wolfram alpha 2^(5*3125) mod (10^8) = 59186432 and the k1 term =0.
// But weirdly that p=3125 doesn't verify in wolfram alpha., last digits are 7291026659218
// Aahhh, even weirder, wolfram does work when you do (1+1/3125)^3125 * 10^15625, but doesn't work when you do p=3125, (1+1/p)^p then ask for more digits.
//  59186432

/*  println("Welcome to the Scala worksheet")
  val pInt = 9
  val pBig = BigDecimal(9)
  pBig.toInt
//  val x=(p.add(BigInteger.valueOf(1))).divide(p).pow(p.toInt)
  val x = ((pBig+1) / pBig)
  val x2 = x.pow(pInt)
  
  BigDecimal(3)/ BigDecimal(7)
  */
  //val string = "hello"
//string.distinct.length()
 
  // p needs to be of the form 2^pi * 5^pj
  
  val s = (for
{
pi <- (0 to 8)
  pj <- (0 to pi)
  }
yield
{
val pInt = (scala.math.pow(2,pi) * scala.math.pow(5,pj)).toInt
// val pBig = BigDecimal(pInt,new java.math.MathContext(5000))
 val pBig = BigDecimal(pInt,new java.math.MathContext(1000))
 val  x = ((pBig+1) / pBig)
 val  x2 = x.pow(pInt)
  val xstring = x2.toString()
 val lastchars = xstring takeRight(8)
 (pi,pj,lastchars.distinct.length())}
 ).filter(_._3==8)                                //> s  : scala.collection.immutable.IndexedSeq[(Int, Int, Int)] = Vector((4,1,
                                                  //| 8))
 
/*
 s  : scala.collection.immutable.IndexedSeq[(Int, Int, Int)] = Vector((4,1,8)
                                                  /
477311073811304114486478503581164406916224853039238513850085608145771986880516808459166772134240378240755073828170296740373082348622309614668344831750401/
176684706477838432958329750074291851582748389687561895812160620129261977600000000000000000000000000000000000000000000000000000000000000000000000000000000

n=2^4*5^1, (1+1/n)^(n)
(1/n + 1)^n≈2.70148494075333709832461456878272238792475107326700486288341959037974809305412210036181253333608719811463892995757
2246876808976510732963225237254414392957161412764897620468903044744861276984746297374070128239740546388495676421384908756690186
877374425850370336770159484671858038254757539142758560046786442399024963  37890625
*/

/*
val sbonus = (for
{
pi <- (0 to 11)
  pj <- (0 to 8)
  }
yield
{
val pInt = (scala.math.pow(2,pi) * scala.math.pow(5,pj)).toInt
 val pBig = BigDecimal(pInt,new java.math.MathContext(0))
 val  x = ((pBig+1) / pBig)
 val  x2 = x.pow(pInt)
  val xstring = x2.toString()
 val lastchars = xstring takeRight(8)
 (pi,pj,lastchars.filter(x => x != '9' && x != '0').distinct.length())}
 ).filter(_._3==8)
*/
  def binomialCoefficient(n: Int, k: Int) ={
    if (k > n/2.0)
    {
    val k2=n-k
    (BigInt(n - k2 + 1) to n).product /
    (BigInt(1) to k2).product
    }
    else
    {
    (BigInt(n - k + 1) to n).product /
    (BigInt(1) to k).product
    }
    }                                             //> binomialCoefficient: (n: Int, k: Int)scala.math.BigInt
    
/*val testBinom =  binomialCoefficient(3126, 11)
val testBinom2 = scala.BigDecimal(10).pow(-11*5) * scala.BigDecimal(2).pow(5*11)
val testBinom3 = BigDecimal(testBinom) * testBinom2
  */
val nbonus = for
{
b2 <- 0 to 0
b5 <- 5 to 5
}
yield{
 	(for
	{
   k <- 0 to 14
  }
  yield
  {
 // (p+1 choose k) * 10^-kb5 * 2^kb5
 val p = (scala.math.pow(2,b2) * scala.math.pow(5,b5)).toInt
 val a = binomialCoefficient(p+1, k)
 val b = scala.BigDecimal(10).pow(-k*b5) * scala.BigDecimal(2).pow(b5*k)
   BigDecimal(a) * b
 })}                                              //> nbonus  : scala.collection.immutable.IndexedSeq[scala.collection.immutable
                                                  //| .IndexedSeq[scala.math.BigDecimal]] = Vector(Vector(1, 1.00032, 0.50016000
                                                  //| 00, 0.166666649600000, 0.04163999573606400000, 0.0083200042680314757120000
                                                  //| , 0.001384892443761399237181440000, 0.00019752523083591157120027852800000,
                                                  //|  0.00002464324779908832762294674915328000, 0.00000273200521377981886323014
                                                  //| 9826130739, 2.725011280432542526940280642575845E-7, 2.47014840722263345860
                                                  //| 2447849386569E-8, 2.051869943599600859612433346890443E-9, 1.57280566261394
                                                  //| 635737430583193029930E-10, 1.1191186349067920024014203553826335349E-11))
 
 nbonus.flatten.sum                               //> res16: scala.math.BigDecimal = 2.71871674195465946635751859085340029582648
                                                  //| 9265349
 
  
//nbonus filter (

  val psol = 4000000                              //> psol  : Int = 4000000
  
  val psol1 = BigDecimal(psol+1)/psol             //> psol1  : scala.math.BigDecimal = 1.00000025
  val psol2top = BigDecimal(psol+1).pow(psol)     //> psol2top  : scala.math.BigDecimal = 2.509610236686675676585177835951449E+2
                                                  //| 6408240
  val psol2bot = BigDecimal(psol).pow(psol)       //> psol2bot  : scala.math.BigDecimal = 9.232341268346647528563879137021077E+2
                                                  //| 6408239
  val psol3 = psol2top / psol2bot                 //> psol3  : scala.math.BigDecimal = 2.718281488673894545409262117540896
  val psol3s = psol3.toString()                   //> psol3s  : String = 2.718281488673894545409262117540896
  val psol4 = psol3s.takeRight(8)                 //> psol4  : String = 17540896
  
  
   
  ///p).pow(p)
  }
  
  