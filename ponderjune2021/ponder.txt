Short answer:
7259701736680389461922586102342375953169154793471358981661239413987142371528493467259545421437269088935158394128249
34 75
2341523227685802973317116937233099044272373695299363945845 1333030648893058553789277061401358577881136005688481248832
1688720447290015642452516760229506509635032011397287059257 1484574852876236578030099116366398251085237658488907102090
1393905404716216131892233482794414472900782174600716102781 871511778412605044471256876208116162244764418001268613572


Long answer:
Getting a number over a googol made any sort of brute force approach intractable. Only x^y+y^x lended itself to growing quickly enough, with (x=10, y=100 being sufficient).
A quick search of x^y + y^x led me to see work done on Leyland primes. Such as this page:
http://www.primefan.ru/xyyxf/primes.html#primes
Where, helpfully, the number of digits was also recorded. The first prime over 100 digits was x=75, y=34.

Next stage was to see if one of those primes could be decomposed into a Pythagorean prime. Some googling on that pointed me to Fermat's theorem on sums of two squares
which states that p = 1 (mod 4), which we can verify with a quick inspection of the last 2 digits (=49).
Now it remains to find the two squares.
But on the same Wikipedia page it links to a very advanced algorithm to find the two squares, and also the fact that
p=1 or 3 (mod 8) iff p = x^2+2y^2
which we can also easily verify by looking at the last 3 digits (=249).

Unfortunately, there's nothing about x^2+7y^2.

More googling and I found a whole book, Primes of the Form x^2+ny^2 by Cox, 1989.
http://www.math.toronto.edu/~ila/Cox-Primes_of_the_form_x2+ny2.pdf

Holy, looks pretty intense.

How about I try WolframAlpha. Plugging 34^75+75^34 = x^2+y^2 into there spit out integer solutions!
Is it that easy?
Changed the y^2 to 2y^2 and new answers. One more to go. Success! 7y^2 also gave an answer.

So Wolfram to the rescue. I'll still enjoy reading 300+ pages of quadratic residue and the LLL lattice reduction algorithm (which is probably Wolfram's magic to make such light work of a 115 digit number since LLL operates in log(n) time.).

I remember reading about the Lenstra–Lenstra–Lovász algorithm being used to solve a previous Ponder This.
https://thomash.fr/2019/06/15/ibm-ponder-this-june-2019.html

Lots to learn still, but got the answer without writing a line of code this time. Thanks for opening my eyes to new math.

Chris Shannon
(from Calgary, Canada)

